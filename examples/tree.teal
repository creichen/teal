// An implementation of a binary tree

type Leaf(dummy : any);
type Branch(left : nonnull any, value : nonnull int, right : nonnull any);
var leaf_singleton;

fun leaf() = {
    if leaf_singleton == null {
        leaf_singleton := new Leaf("");
    }
    return leaf_singleton;
}

type Tree(t : nonnull any);

fun empty_tree() : Tree = return new Tree(leaf());

fun tree_add(t : Tree, x : nonnull int) = {
 t.t := _rec_tree_add(t.t, x);
}

fun _rec_tree_add(node : nonnull any, x : nonnull int) : nonnull any = {
    if (node == leaf()) {
        return new Branch(leaf(), x, leaf());
    }
    var b : nonnull Branch := node;
    if (b.value > x) { return new Branch(_rec_tree_add(b.left, x),
                                  b.value,
                                  b.right); }
    if (b.value < x) { return new Branch(b.left, b.value, _rec_tree_add(b.right, x)); }
    return b;
}

fun tree_contains(t : Tree, x : nonnull int) = {
    return _rec_tree_contains(t.t, x);
}

fun _rec_tree_contains(node : nonnull any, x : nonnull int) = {
    if (node == leaf()) { return 0; }
    var b : Branch := node;
    if (b.value == x) { return 1; }
    if (b.value < x) { return _rec_tree_contains(b.right, x); }
    if (b.value > x) { return _rec_tree_contains(b.left, x); }
}

/////

fun tree_add_array(t : Tree, arr : array[int]) = {
    var i := 0;
    var s := array_length(arr);
    while (i < s) {
        tree_add(t, arr[i]);
        i := i + 1;
    }
}

fun remove_duplicates(arr : array[int]) = {
    // A function that will replace duplicates in an array
    // With the value null.

    // In this we save what we have seen so far.
    var s : Tree := empty_tree();
    var i := 0;
    var l := array_length(arr);
    while (i < l) {
          var e : int := arr[i];
          if (tree_contains(s, e)) {
             arr[i] := null;
          } else {
            tree_add(s, e);
          }
          i := i + 1;
    }
    return arr;
}

fun main() = {
    var t : Tree := empty_tree();
    tree_add(t, 2);
    tree_add(t, 3);
    tree_add(t, 4);
    tree_add(t, 5);
    tree_add_array(t, [6, 7, 8]);

    print(tree_contains(t, 0));
    print(tree_contains(t, 2));

    print(tree_contains(t, 4));
    print(tree_contains(t, 5));

    // We test remove_duplicates
    print(remove_duplicates([1, 2, 2, 3, 4, 5]));

    tree_add_array(t, remove_duplicates([1, 2, 2, 3]));
}
