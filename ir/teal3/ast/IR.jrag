import lang.common.SourceLocation;

aspect IR {
	public static IRClass IRClass.newBuiltinIRClass(String name) {
		IRClass c = new IRClass().setIRName(new IRName(name));
		c.setSourceLocation(SourceLocation.BUILTIN);
		return c;
	}

	public static IRClass IRModule.IntegerType = IRClass.newBuiltinIRClass("int");
	public static IRClass IRModule.StringType = IRClass.newBuiltinIRClass("string");
	public static IRClass IRModule.AnyType = IRClass.newBuiltinIRClass("any");
	public static IRClass IRModule.ArrayType = IRClass.newBuiltinIRClass("array")
		.addIRTypeFormal(new IRTypeFormal(new IRName("T")));

	public static IRTypeRef IRModule.makeIntegerTypeRef() {
		return new IRTypeInstanceRef(IRModule.IntegerType, new List());
	}

	public static IRTypeRef IRModule.makeStringTypeRef() {
		return new IRTypeInstanceRef(IRModule.StringType, new List());
	}

	public static IRTypeRef IRModule.makeAnyTypeRef() {
		return new IRTypeInstanceRef(IRModule.AnyType, new List());
	}

	public String IRModule.defaultName = "main";

	syn nta List<IRType> IRModule.builtinTypes() {
		List<IRType> btypes = new List<>();
		btypes.add(IntegerType);
		btypes.add(StringType);
		btypes.add(AnyType);
		return btypes;
	}

	inh int IRCodeBB.getNumber();
	eq IRFunction.getIRCodeBB(int i).getNumber() = i;
	syn String IRCodeBB.label() = "bb" + getNumber();

	private SourceLocation ASTNode.srcLoc = SourceLocation.UNKNOWN;
	public void ASTNode.setSourceLocation(SourceLocation srcLoc) {
		this.srcLoc = srcLoc;
	}
	public SourceLocation ASTNode.getSourceLocation() {
		return srcLoc;
	}
}
