import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.Arrays;
import lang.common.NotYetImplementedError;
import lang.common.BuiltinNames;
import static lang.common.Debug.dbgi;

aspect IRInterpreter {
	public class FailedAssertException extends InterpreterException {
		IRValue v;
		lang.ir.ASTNode op;

		FailedAssertException(IRValue v, lang.ir.ASTNode op) {
			super("Assertion failed");
			this.v = v;
			this.op = op;
		}
	}

	public class VirtualMethodTable {
		Map<IRFunction, IRFunction> overridenBy = new HashMap<>();

		public void overrides(IRFunction func, IRFunction overridenFunc) {
			overridenBy.put(overridenFunc, func);
		}

		public void join(VirtualMethodTable vt) {
			for (Map.Entry<IRFunction, IRFunction> p : vt.overridenBy.entrySet()) {
				IRFunction f = p.getKey();
				IRFunction g = p.getValue();

				// f is overriden by g and g is overrided by g', then f is overriden by g'
				if (overridenBy.containsKey(g)) {
				   g = overridenBy.get(g);
				}

				if (!overridenBy.containsKey(f)) {
					overridenBy.put(f, g);
				} else if (overridenBy.get(f) != g) {
					throw new RuntimeException("Method overriden twice, along different paths of the inheritance tree");
				}
			}
		}

		public IRFunction lookup(IRFunction f) {
			if (overridenBy.containsKey(f))
				return overridenBy.get(f);
			return f;
		}
	}

	syn boolean IRFunction.overrides(IRFunction other) {
		// TODO: this uses only the name to check if a function overrides
		// another; maybe we want something fancier?
		return getIRName().getString().equals(other.getIRName().getString());
	}

	syn VirtualMethodTable IRClass.getVTable() {
		VirtualMethodTable vtable = new VirtualMethodTable();
		java.util.List<IRFunction> superFuncs = new ArrayList<>();
		for (IRTypeRef superRef : getSupers()) {
			IRClass superClass = (IRClass) ((IRType) superRef).getIRTypeCon();
			for (IRFunction f : superClass.getIRFunctions())
				superFuncs.add(f);
		}

		// TODO: this is quadratic, but it's easy to implement
		for (IRFunction f : getIRFunctions()) {
			for (IRFunction superf : superFuncs) {
				if (f.overrides(superf)) {
					vtable.overrides(f, superf);
				}
			}
		}

		// join in the virtual tables of the super classes
		for (IRTypeRef superRef : getSupers()) {
			IRClass superClass = (IRClass) ((IRType) superRef).getIRTypeCon();
			vtable.join(superClass.getVTable());
		}

		return vtable;
	}


	public class IRObject extends IRValue {
		private Storage store = new Storage();
		private VirtualMethodTable vtable;

		public IRObject(IRConcreteType type, VirtualMethodTable vtable) {
			super(type);
			this.vtable = vtable;
		}

		public Storage getStore() {
			return store;
		}

		public VirtualMethodTable getVTable() {
			return vtable;
		}
	}


	public void IRDispatchInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		// lookup the value of base in the store and provide that as self argument
		IRObject self = (IRObject) ctx.getStore().get(getBase());
		IRFunction callee = getIRFunRef().getIRFunction();

		// remap the callee through the vTable
		callee = self.getVTable().lookup(callee);

		if (callee.getNumParamType() != getNumArg())
			throw new InterpreterException("Mismatch between declared and actual number of arguments.");
		ArrayList<IRValue> actuals = new ArrayList<>();
		for (IRVarRef arg : getArgs()) {
			IRValue v = ctx.getStore().get(arg);
			actuals.add(v);
		}

		IRFunctionEvalCtx calleeCtx = new IRFunctionEvalCtx(new Storage(), ctx.getGlobalStore(), actuals, self);
		IRValue retVal = callee.eval(calleeCtx);

		ctx.getStore().set(getDst(), retVal);
	}

	public void IRNewInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		// class C[T] { ... new Box[T]() ... } and also
		// new Map<int, int>
		IRType type = getIRType();
		if (type.getIRTypeCon().getNumIRTypeFormal() != type.getNumTypeActual())
			throw new InterpreterException("Can't instantiate formal parameters of type " + type.getIRTypeCon());

		IRConcreteType tctx = new IRConcreteType(type.getIRTypeCon());
		for (int i = 0; i < type.getIRTypeCon().getNumIRTypeFormal(); ++i) {
			IRType actual;
			if (type.getTypeActual(i) instanceof IRTypeFormalRef) {
				// we need a method context to be able to evaluate type formals
				if (!ctx.isMethodCtx())
					throw new InterpreterException("Can't evaluate formal type parameter " + type.getTypeActual(i));
				IRObject instance = (IRObject) ctx.getSelf();
				// lookup what types is bound to the current actual
				actual = instance.getType().lookup(((IRTypeFormalRef) type.getTypeActual(i)).getIRTypeFormal());
			} else {
				actual = (IRType) type.getTypeActual(i);
			}
			tctx.bind(type.getIRTypeCon().getIRTypeFormal(i), actual);
		}

		IRValue val = new IRObject(tctx, ((IRClass) type.getIRTypeCon()).getVTable());
		ctx.getStore().set(getDst(), val);
	}

	public void IRLoadInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		// extract the instance storage
		IRObject instance = (IRObject) ctx.getStore().get(getBase());
		// return the value from the storage
		ctx.getStore().set(getDst(), instance.getStore().get(getField()));
	}

	public void IRStoreInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		// extract the instance storage
		IRObject instance = (IRObject) ctx.getStore().get(getBase());
		// set the value in the instance storage
		instance.getStore().set(getField(), ctx.getStore().get(getSrc()));
	}

	public void IRSelfInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		if (!ctx.isMethodCtx())
			throw new InterpreterException("Attempt to execute 'self' instruction outside a method.");
		ctx.getStore().set(getDst(), ctx.getSelf());
	}

	public void IRAssertInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		IRValue test = ctx.getStore().get(getTest());
		if (!(test instanceof IRIntegerValue))
			throw new FailedAssertException(test, this);
		IRIntegerValue testI = (IRIntegerValue) test;
		if (testI.asLong() == 0)
			throw new FailedAssertException(test, this);
	}
}
