import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.Arrays;
import lang.common.NotYetImplementedError;
import lang.common.BuiltinNames;
import static lang.common.Debug.dbgi;

aspect IRInterpreter {
	public class InterpreterException extends Exception {
		InterpreterException(String e) {
			super(e);
		}
	}

	public class ArrayAccessException extends InterpreterException {
		IRValue v;
		lang.ir.ASTNode op;

		ArrayAccessException(IRValue v, lang.ir.ASTNode op) {
			super("Array access exception");
			this.v = v;
			this.op = op;
		}
	}

	public class NullDereferenceException extends InterpreterException {
		IRValue v;
		lang.ir.ASTNode op;

		NullDereferenceException(IRValue v, lang.ir.ASTNode op) {
			super("Null dereference");
			this.v = v;
			this.op = op;
		}
	}

	public class IncompatibleTypeException extends InterpreterException {
		IRValue v;
		lang.ir.ASTNode op;

		IncompatibleTypeException(IRValue v, lang.ir.ASTNode op) {
			super("Incompatible type");
			this.v = v;
			this.op = op;
		}
	}

	public class QualifierException extends InterpreterException {
		QualifierException(IRQualifier q, IRValue val, IRVar var) {
			super("Qualifier " + q + " failed on variable " + var + " with value " + val);
		}
	}

	public class IRConcreteType {
		private IRTypeCon type;
		private Map<IRTypeFormal, IRType> bindings = new HashMap<>();

		public IRConcreteType(IRTypeCon type) {
			this.type = type;
		}

		public void bind(IRTypeFormal formal, IRType actual) {
			bindings.put(formal, actual);
		}

		public IRType lookup(IRTypeFormal formal) {
			return bindings.get(formal);
		}

		public boolean allTypeVariablesAreBound() {
			for (IRTypeFormal f : type.getIRTypeFormals()) {
				if (!bindings.containsKey(f))
					return false;
			}
			return true;
		}

		@Override public String toString() {
			return type.getIRName().getString();
		}
	}

	public class IRValue {
		private IRConcreteType type;
		public IRValue(IRConcreteType type) {
			this.type = type;
		}

		public boolean isNull() {
			return false;
		}

		public IRConcreteType getType() {
			return type;
		}

		/**
		 * String representation of the dynamic type
		 * May be "null"
		 */
		public String
		getTypeString() {
			if (this.getType() == null) {
				return null;
			}
			return this.getType().toString();
		}

		@Override public String toString() {
			if (this.getTypeString() == null) {
				return this.toShortString();
			}
			return this.toShortString() + " : " + this.getTypeString();
		}

		public String toShortString() {
			return "<@" + System.identityHashCode(this) + ">";
		}

		/**
		 * Teal Equality for objects: defaults to reference equality
		 */
		public boolean equalsIR(IRValue other) {
			return other == this;
		}
	}

	public class IRIntegerValue extends IRValue {
		private long val;
		public IRIntegerValue(long val) {
			super(null);
			this.val = val;
		}
		public long asLong() {
			return val;
		}

		@Override public String
		getTypeString() {
			return "int";
		}

		@Override public String toShortString() {
		    return "" + this.val;
		}

		/**
		 * Check integer equality
		 */
		@Override
		public boolean equalsIR(IRValue other) {
			if (other instanceof IRIntegerValue) {
				return ((IRIntegerValue) other).asLong() == this.asLong();
			}
			return false;
		}
	}

	public class IRStringValue extends IRValue {
		private String val;
		public IRStringValue(String val) {
			super(null);
			this.val = val;
		}

		public String asString() {
			return val;
		}

		@Override public String
		getTypeString() {
			return "string";
		}

		@Override public String toShortString() {
			return "\"" + val.replaceAll("\"","\\\\\"") + "\"";
		}

		/**
		 * Check string equality
		 */
		@Override
		public boolean equalsIR(IRValue other) {
			if (other instanceof IRStringValue) {
				return ((IRStringValue) other).asString().equals(this.asString());
			}
			return false;
		}
	}

	public class IRNullValue extends IRValue {
		public IRNullValue(IRConcreteType type) {
			super(type);
		}

		public boolean isNull() {
			return true;
		}

		@Override public String toShortString() {
			return "null";
		}

		/**
		 * Check nullness
		 */
		@Override
		public boolean equalsIR(IRValue other) {
			return other.isNull();
		}
	}

	public class IRArray extends IRValue {
		private IRValue[] values;
		private IRType elementType;

		public IRArray(IRType elementType, long size) {
			super(null);
			this.elementType = (IRType) elementType;
			values = new IRValue[(int) size];
			if (size > 0) {
				IRNullValue nullValue = new IRNullValue(new IRConcreteType(this.elementType.getIRTypeCon()));
				for (int i = 0; i < size; ++i) {
					this.values[i] = nullValue;
				}
			}
		}

		public void set(long i, IRValue v) throws InterpreterException {
			List<IRQualifier> qs = elementType.getIRQualifiers();
			for (IRQualifier q : qs) {
				if (!q.check(v)) {
					throw new QualifierException(q, this, null);
				}
			}
			values[(int) i] = v;
		}

		public IRValue get(long i) {
			return values[(int) i];
		}

		public long getSize() {
			return values.length;
		}

		private String
		toStringWithTypes(boolean withType) {
			StringBuffer sb = new StringBuffer("[");
			for (int i = 0; i < values.length; i++) {
				if (i > 0) {
					sb.append(", ");
				}
				IRValue v = this.values[i];
				if (withType) {
					sb.append(v.toString());
				} else {
					sb.append(v.toShortString());
				}
			}
			sb.append("]");
			return sb.toString();
		}

		@Override public String toShortString() {
			return this.toStringWithTypes(false);
		}

		@Override public String toString() {
			return this.toStringWithTypes(true) + " : " + this.getTypeString();
		}
	}

	class Storage {
		private HashMap<IRVar, IRValue> varToVal;
		public Storage() {
			varToVal = new HashMap<IRVar, IRValue>();
		}

		public void set(IRVar var, IRValue val) throws InterpreterException {
			if (var.getIRTypeRef() instanceof IRType) {
				// The variable has a concrete type, as compared with a type variable
				// check any qualifiers; This is always true for TEAL-0, TEAL-1, but
				// not for TEAL-3.
				List<IRQualifier> qs = ((IRType) var.getIRTypeRef()).getIRQualifiers();
				for (IRQualifier q : qs) {
					if (!q.check(val)) {
						throw new QualifierException(q, val, var);
					}
				}
			}
			varToVal.put(var, val);
		}

		public IRValue get(IRVar var) throws InterpreterException {
			IRValue val = varToVal.get(var);
			if (val == null)
				throw new InterpreterException("IR value " + var.getIRName().getString() + " is not present in storage. ");
			return val;
		}

		public void set(IRVarRef var, IRValue  val) throws InterpreterException {
			set(var.getIRVar(), val);
		}

		public IRValue get(IRVarRef var) throws InterpreterException {
			return get(var.getIRVar());
		}

		public String toString() {
			String r = "";
			for (Map.Entry<IRVar, IRValue> v : varToVal.entrySet()) {
				r += v.getKey().toString() + "=" + v.getValue().toString() + "\n";
			}
			return r;
		}
	}

	public boolean IRQualifier.check(IRValue v) {
		return true;
	}

	@Override public boolean IRNonNull.check(IRValue v) {
		return !(v instanceof IRNullValue);
	}

	public class IRResult {
		private IRValue retval;
		private Storage globals;

		public IRResult(IRValue retval, Storage globals) {
			this.retval = retval;
			this.globals = globals;
		}

		public IRValue getReturnValue() {
			return this.retval;
		}

		public IRValue getGlobal(IRVarRef ref) {
			try {
				return this.globals.get(ref);
			} catch (InterpreterException exn) {
				exn.printStackTrace();
				return null;
			}
		}
	}

	public IRResult IRProgram.eval(java.util.List<IRValue> args) throws InterpreterException {
		Storage g = new Storage();

		// initialize all the globals
		for (IRModule m : getIRModules()) {
			for (IRVar v : m.getIRVars()) {
				g.set(v, new IRNullValue(null));
			}
		}

		// look for the first main function and execute it
		for (IRModule m : getIRModules()) {
			for (IRFunction f : m.getIRFunctions()) {
				if (f.getIRName().getString().equals("main")) {
					return new IRResult(f.eval(new IRFunctionEvalCtx(new Storage(), g, args)),
							    g);
				}
			}
		}

		return null;
	}

	class IRFunctionEvalCtx {
		java.util.List<IRValue> args;
		Storage s;
		Storage g;
		IRValue self;

		public IRFunctionEvalCtx(Storage s, Storage g, java.util.List<IRValue> args) {
			this.s = s;
			this.g = g;
			this.args = args;
			this.self = null;
		}

		public IRFunctionEvalCtx(Storage s, Storage g, java.util.List<IRValue> args,
								 IRValue self) {
			this(s, g, args);
			this.self = self;
		}

		public IRValue getArg(int i) {
			return args.get(i);
		}

		public int getArgsNr() {
			return args.size();
		}

		public Storage getStore()  {
			return s;
		}

		public Storage getGlobalStore() {
			return g;
		}

		public IRValue getSelf() {
			return self;
		}

		public boolean isMethodCtx() {
			return self != null;
		}
	}

	public IRValue IRFunction.evalBuiltin(IRFunctionEvalCtx ctx) throws InterpreterException {
		return Builtins.translateOperation(this.getIRName().getString()).eval(ctx);
	}

	public IRValue IRFunction.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		if (getNumIRCodeBB() == 0) {
			return evalBuiltin(ctx);
		}

		dbgi("entering function");
		dbgi(toString());
		dbgi(ctx.getStore().toString());

		IRCodeBB currentBB = getIRCodeBB(0);
		while (true) {
			currentBB.eval(ctx);

			if (currentBB.getIRCodeExit() instanceof IRReturn) {
				IRVarRef rv = ((IRReturn)(currentBB.getIRCodeExit())).getIRVarRef();
				dbgi("exec " + currentBB.getIRCodeExit() + " ret=" + ctx.getStore().get(rv));
				return ctx.getStore().get(rv);
			} else if (currentBB.getIRCodeExit() instanceof IRJump) {
				IRJump ji = (IRJump) currentBB.getIRCodeExit();
				currentBB = ji.getIRCodeBBRef().getIRCodeBB();
				dbgi("exec " + ji);
			} else {
				IRBranch bi = (IRBranch) currentBB.getIRCodeExit();
				// TODO: check TEAL types here, instead of Java types
				IRValue cond = ctx.getStore().get(bi.getCond());
				dbgi("exec " + bi + " cond=" + cond);
				if (!(cond instanceof IRIntegerValue))
					throw new InterpreterException("Condition expected to be integer");
				if (((IRIntegerValue)cond).asLong() == 0) {
					currentBB = bi.getFalseTarget().getIRCodeBB();
				} else {
					currentBB = bi.getTrueTarget().getIRCodeBB();
				}
			}
		}
	}

	public void IRCodeBB.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		for (IRInsn i : getIRInsns()) {
			i.eval(ctx);
		}
	}

	// Instructions
	public void IRInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		throw new NotYetImplementedError(this.getClass() + " Instruction evaluation not implemented.");
	}

	public void IRCopyInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), ctx.getStore().get(getSrc()));
	}

	public void IRArgInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), ctx.getArg(getIndex()));
	}

	public void IRCallInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		IRFunction callee = getIRFunRef().getIRFunction();
		if (callee.getNumParamType() != getNumArg())
			throw new InterpreterException("Mismatch between declared and actual number of arguments.");
		ArrayList<IRValue> actuals = new ArrayList<>();
		for (IRVarRef arg : getArgs()) {
			IRValue v = ctx.getStore().get(arg);
			actuals.add(v);
		}

		// TODO: implement a storage for global variables
		IRFunctionEvalCtx calleeCtx = new IRFunctionEvalCtx(new Storage(), ctx.getGlobalStore(), actuals);
		IRValue retVal = callee.eval(calleeCtx);

		ctx.getStore().set(getDst(), retVal);
	}

	public void IRNewArrayInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		IRIntegerValue size = (IRIntegerValue) ctx.getStore().get(getSize());
		if (size.asLong() < 0) {
			throw new InterpreterException("Negative array size.");
		}
		IRType elementType = getIRType();
		IRValue array = new IRArray(elementType, size.asLong());
		ctx.getStore().set(getDst(), array);
	}

	public void IRLoadArrayInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		IRIntegerValue index = (IRIntegerValue) ctx.getStore().get(getIndex());
		IRArray array = (IRArray) ctx.getStore().get(getBase());
		if (index.asLong() < 0 || index.asLong() >= array.getSize()) {
			throw new ArrayAccessException(array, this);
		}
		ctx.getStore().set(getDst(), array.get(index.asLong()));
	}

	public void IRStoreArrayInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		IRIntegerValue index  = (IRIntegerValue) ctx.getStore().get(getIndex());
		IRArray array = (IRArray) ctx.getStore().get(getBase());
		IRValue datum = ctx.getStore().get(getSrc());
		if (index.asLong() < 0 || index.asLong() >= array.getSize()) {
			throw new ArrayAccessException(array, this);
		}
		array.set(index.asLong(), datum);
	}

	public void IRLoadStaticInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		// move a value from the global store to the local store
		ctx.getStore().set(getDst(), ctx.getGlobalStore().get(getSrc()));
	}

	public void IRStoreStaticInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		// move a value from the local store to the global store
		ctx.getGlobalStore().set(getDst(), ctx.getStore().get(getSrc()));
	}

	public void IRConstantInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), getSrc().asIRValue());
	}

	// Constants
	syn IRValue IRConstant.asIRValue();
	eq IRString.asIRValue() = new IRStringValue(getValue());
	eq IRInteger.asIRValue() = new IRIntegerValue(getValue());
	eq IRNull.asIRValue() = new IRNullValue(null);
}
