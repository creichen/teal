import java.util.ArrayList;

aspect IRUtil {
	inh IRCodeBB IRInsn.parentBB();
	eq IRCodeBB.getIRInsn().parentBB() = this;

	/**
	   Insert an instruction before another instruction, in a basic block.

	   This method allows chaining, e.g.
	   i0.addInsnBefore(i1).addInsnBefore(i2); produces the instruction
	   sequence i1, i2, i0
	 */
	public IRInsn IRInsn.addInsnBefore(IRInsn newInsn) {
		if (!(getParent() instanceof List)) {
			throw new RuntimeException("Instruction must be member of a basic block.");
		}

		List parentList = (List) getParent();
		int i = parentList.getIndexOfChild(this);

		parentList.insertChild(newInsn, i);

		return this;
	}

	/**
	   Insert an instruction before another instruction, in a basic block.

	   This method allows chaining, e.g.
	   i0.addInsnAfter(i1).addInsnAfter(i2); produces the instruction
	   sequence i0, i1, i2
	 */

	public IRInsn IRInsn.addInsnAfter(IRInsn newInsn) {
		if (!(getParent() instanceof List)) {
			throw new RuntimeException("Instruction must be member of a basic block.");
		}

		List parentList = (List) getParent();
		int i = parentList.getIndexOfChild(this);

		parentList.insertChild(newInsn, i + 1);

		return newInsn;
	}

	/**
	   Insert an instruction at position i, inside a basic block. If i == getNumIRInsn(),
	   then the instruction is inserted last, if i < getNumIRInsn(), the instructions
	   in the range [i, getNumIRInsn() - 1] are moved to [i + 1, getNumIRInsn()] and the
	   new instruction is placed at position i.
	 */
	public void IRCodeBB.insertInsn(IRInsn newInsn, int i) {
		getIRInsnList().insertChild(newInsn, i);
	}

	public IRVar IRFunction.createAnyVariable(String name) {
		return createLocalVariable(name, IRModule.makeAnyTypeRef());
	}

	public IRVar IRFunction.createIntegerVariable(String name) {
		return createLocalVariable(name, IRModule.makeIntegerTypeRef());
	}

	/**
	   Create a local variable of given type.
	   Useful for creating temporary variables.
	 */
	public IRVar IRFunction.createLocalVariable(String name, IRType t) {
		IRVar v = new IRVar(new IRName(name), t);
		this.addLocal(v);
		return v;
	}

	/**
	   Retrieve a local variable by name. Return null if the function does
	   not contain such a variable.
	 */
	public IRVar IRFunction.getLocalVariable(String name) {
		for (IRVar v : getLocals()) {
			if (v.getIRName().getString().equals(name))
				return v;
		}
		return null;
	}

	/**
	 * A collection of all basic blocks in the program
	 */
	coll ArrayList<IRCodeBB> IRProgram.basicBlocks();

	IRCodeBB contributes this to IRProgram.basicBlocks();

	/**
	 * Name of a basic block, in the format <function>.bb<blocknr>
	 *
	 * Names are unique in Teal-2 within one module/compilation unit.
	 */
	syn String IRCodeBB.name() {
	    return this.getOwnerFunction().getIRName() + "." + this.label();
	}
}
