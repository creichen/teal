// Top level
IRProgram ::= IRModule*;
IRModule ::= IRModuleName IRVar* IRTypeCon* IRFunction*;
IRModuleName ::= IRName*;
IRVar ::= IRName IRTypeRef;

IRFunction ::= IRName IRTypeRef ParamType:IRTypeRef* Local:IRVar* IRCodeBB*;
IRCodeBB ::= IRInsn* IRCodeExit;

// Instructions
abstract IRInsn;
IRConstantInsn : IRInsn ::= Dst:IRVarRef Src:IRConstant;

// Instruction to access the i-th argument
IRArgInsn : IRInsn ::= Dst:IRVarRef <Index:Integer>;

// Copy instruction
IRCopyInsn : IRInsn ::= Dst:IRVarRef Src:IRVarRef;

abstract IRAbstractLoadInsn : IRInsn ::= Dst:IRVarRef;
IRLoadStaticInsn : IRAbstractLoadInsn ::= Src:IRVarRef;
IRLoadArrayInsn : IRAbstractLoadInsn ::= Base:IRVarRef Index:IRVarRef;

abstract IRAbstractStoreInsn : IRInsn ::= Src:IRVarRef;
IRStoreStaticInsn : IRAbstractStoreInsn ::= Dst:IRVarRef;
IRStoreArrayInsn : IRAbstractStoreInsn ::= Base:IRVarRef Index:IRVarRef;

abstract IRAbstractCallInsn : IRInsn ::= Dst:IRVarRef Arg:IRVarRef* IRFunRef;
IRCallInsn : IRAbstractCallInsn;

IRNewArrayInsn : IRInsn ::= Dst:IRVarRef IRType Size:IRVarRef;

// Block terminators
abstract IRCodeExit;
IRReturn : IRCodeExit ::= IRVarRef;
IRJump : IRCodeExit ::=  IRCodeBBRef;
IRBranch : IRCodeExit ::= Cond:IRVarRef TrueTarget:IRCodeBBRef FalseTarget:IRCodeBBRef;

abstract IRConstant;
IRString : IRConstant ::= <Value:String>;
IRInteger : IRConstant ::= <Value:Long>;
IRNull : IRConstant;

IRVarRef ::= <IRVar:IRVar>;
IRFunRef ::= <IRFunction:IRFunction>;
IRCodeBBRef ::= <IRCodeBB:IRCodeBB>;

abstract IRQualifier;
IRNonNull : IRQualifier;

// Types
abstract IRTypeCon ::= IRName IRTypeFormal*;
IRBuiltinTypeCon : IRTypeCon;

// Type reference
abstract IRTypeRef;
IRType : IRTypeRef ::= <IRTypeCon:IRTypeCon> TypeActual:IRTypeRef* IRQualifier*;

IRName ::= <String>;

IRTypeFormal ::= IRName;
