#+TITLE: TEAL - typed, easily analyzable language

* Building
To build TEAL-0 (default) run:
~./gradlew jar test~
and ~./gradlew -PlangVersion=teal-3 jar test~ for TEAL-3.

* Structure
  The ~compiler~ directory contains the implementation of the compiler.
  It's divided into three parts:
  1. ~compiler/<teal-variant>/frontend~: A compiler frontend that parses code, creates an AST, runs name and type analyses.
  2. ~compiler/<teal-variant>/backend~: A compiler backend which takes and AST and generates TEAL IR code (the intermediate representation for TEAL).
  3. ~ir/~: An interpreter that takes some code in intermediate representation form and executes it. All variants of TEAL use the same interpreter.

** Variants of TEAL
   In the ~compiler~ directory, there are two directories ~compiler/teal0~ and ~compiler/teal3~.
   ~teal3~ the full implementation of TEAL, with all it's features (classes, inheritance, etc.).
   TEAL-0, TEAL-1, and TEAL-2 are variants of TEAL with some features not implemented.

** What is an intermediate representation?
   An intermediate representation is some kind of "simplified" programming language, which is usually more verbose than
   the front language, because it's not made for humans to read, but for a program to read.

   If you compare with more well-known languages, TEAL IR is like Java Bytecode. A programming language which
   can do the same things but doesn't have all the nice features to make it readable to humans.

** Test files
  The ~testfiles~ directory contains test files for various parts of the compiler and interpreter.
  Each file in these directories can have the following extensions:
  - ~.in~: A TEAL file that is loaded in a test
  - ~.expected~: The expected output of the test (not necessary TEAL, depending on what we test).
  - ~.out~: The actual output we got when running the part of the compiler we're testing.
    - Tests compare ~.expected~ and ~.out~ files.
  - ~.teal~: A TEAL file that is usually imported by some other file, usually used for library code.


  These files are loaded and tested by the various test classes in:
  - ~compiler/teal0/test/lang~
  - ~compiler/teal3/test/lang~: *NOTE: not yet the case*

* Generate and dump the IR
~java -jar compiler.jar program.teal~

* Generate and interpret the IR
~java -jar compiler.jar program.teal --run arg1 arg2 ...~
The arguments to the program can be integers or strings. Prints out the value returned by main.

* Logging
Enabled by the ~TEAL_DEBUG~ environment variable, ~export TEAL_DEBUG=interp,irgen~.

* Notes on the implementation
See [[file:notes.org][the implementation notes]].
