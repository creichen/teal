plugins {
  id 'java'
  id 'idea'
  id 'org.jastadd' version '1.13.1'
}

defaultTasks 'test'

// Specify where to look for dependencies like Beaver, JFlex:
repositories.mavenCentral()

// Dependency configurations (https://docs.gradle.org/current/userguide/dependency_management.html#sub:configurations):
configurations {
  jflex
  beaver
  jastaddparser
}

// Dependencies are Jar files needed to compile and generate the compiler.
dependencies {
  compile 'net.sf.beaver:beaver-rt:0.9.11'

  testCompile 'junit:junit:4.12'

  jflex 'de.jflex:jflex:1.6.1'
  beaver 'org.extendj:nbfront:0.1.5'
  // beaver 'net.sf.beaver:beaver-cc:0.9.11'

  jastadd2 "org.jastadd:jastadd:2.3.4" // Selects which JastAdd version to use (optional).

  jastaddparser 'org.jastadd:jastaddparser:1.0.3'
}

// This specifies where the source code is located:
sourceSets {
  main.java.srcDirs = [ 'src/java', 'src/gen' ]
  test.java.srcDirs = [ 'src/test' ]
}

// Configuration for the test running.
test {
  // Log passed/failed tests in the console (see also build/reports/tests):
  testLogging.events 'passed', 'failed'

  testLogging.exceptionFormat = 'full' // Full error output for test failures.

  dependsOn 'cleanTest'  // This causes tests to always be re-run.
}

// Configuration for the generated Jar file.
jar {
  // The Main-Class attribute specifies which class should be run when by java -jar compiler.jar.
  manifest.attributes 'Main-Class': 'lang.Compiler'
  destinationDir = projectDir  // Gradle by default puts the Jar in build/libs/.
  archiveName = 'compiler.jar'

  // The following from-specification includes all dependencies in compiler.jar
  // so that it can be run as a separate program easily.
  // This is needed because the Beaver runtime classes are otherwise not included.
  // Source: https://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

// Before compiling, we should generate some Java code:
compileJava.dependsOn 'generateJava', 'generateScanner', 'generateParser'

task generateJava(type: org.jastadd.JastAddTask) {
  description 'Generates the compiler AST classes from JastAdd specifications.'
  outputDir = file('src/gen')
  sources = fileTree(dir: 'src/jastadd', includes: [ '**/*.jrag', '**/*.jadd', '**/*.ast' ])
  options = [ '--package=lang.ast', '--beaver', '--cache=all' ]
}

task generateScanner(type: JavaExec) {
  description 'Generates the scanner with JFlex.'
  classpath = configurations.jflex
  main = 'jflex.Main'

  // Options to JFlex (http://jflex.de/manual.html#running-jflex):
  args '-d', file('src/gen/lang/ast').path, file('src/scanner/scanner.flex').path

  doFirst {
    // Ensure src/gen exists before running JFlex:
    file('src/gen').mkdirs()
  }
}

task generateBeaver(type: JavaExec) {
    doFirst {
        file('src/gen/parser').mkdirs()
    }

    description 'Generates the parser with Beaver.'
    classpath = configurations.jastaddparser
    main = 'org.jastadd.jastaddparser.Main'

    args file('src/parser/AttoL.parser').path, file('src/gen/parser/AttoLParser.beaver').path
}


task generateParser(type: JavaExec) {
  description 'Generates the parser with Beaver.'
  classpath = configurations.beaver
  main = 'beaver.comp.run.Make'

  // Options to Beaver (http://beaver.sourceforge.net/):
  args '-d', file('src/gen/lang/ast').path,
      '-t', '-c', '-w', '-a',
      file('src/gen/parser/AttoLParser.beaver').path

  doFirst {
    // Ensure src/gen exists before running Beaver:
    file('src/gen').mkdirs()
  }
}

generateParser.dependsOn 'generateBeaver'

// The following makes the clean task also remove generated code:
clean.dependsOn 'cleanGeneratedJava'

task cleanGeneratedJava(type: Delete) {
  description 'Remove generated Java code.'
  delete file('src/gen')
}
