import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import lang.ast.NotYetImplementedError;
import lang.ast.BuiltinNames;
import static lang.common.Debug.dbgi;

aspect IRInterpreter {
	public class InterpreterException extends Exception {
		InterpreterException(String e) {
			super(e);
		}
	}

	public class IRTypeContext {
		private IRType type;
		private Map<IRTypeFormal, IRTypeInstanceRef> bindings = new HashMap<>();

		public IRTypeContext(IRType type) {
			this.type = type;
		}

		public void bind(IRTypeFormal formal, IRTypeInstanceRef actual) {
			bindings.put(formal, actual);
		}

		public IRTypeInstanceRef lookup(IRTypeFormal formal) {
			return bindings.get(formal);
		}
	}

	public class IRInstance {
		private IRTypeContext ctx;
		private Storage store;

		public IRInstance(IRTypeContext ctx, Storage s) {
			this.ctx = ctx;
			this.store = s;
		}

		public Storage getStore() {
			return store;
		}

		public IRTypeContext getTypeCtx() {
			return ctx;
		}
	}

	public class IRValue {
		private IRTypeRef dynamicType;
		private Object value;

		public IRValue(IRTypeRef type, Object value) {
			this.dynamicType = type;
			this.value = value;
		}

		public IRTypeRef getDynType() {
			return dynamicType;
		}

		public Object getValue() {
			return value;
		}

		public String toString() {
			return value == null ? "null" : value.toString() + ":" + getDynType().toString();
		}
	}

	class Storage {
		private HashMap<IRVar, IRValue> varToVal;
		public Storage() {
			varToVal = new HashMap<IRVar, IRValue>();
		}

		public void set(IRVar var, IRValue val) {
			varToVal.put(var, val);
		}

		public IRValue get(IRVar var) throws InterpreterException {
			IRValue val = varToVal.get(var);
			if (val == null)
				throw new InterpreterException("IR value " + var.getIRName().getString() + " is not present in storage. ");
			return val;
		}

		public void set(IRVarRef var, IRValue  val)  {
			set(var.getIRVar(), val);
		}

		public IRValue get(IRVarRef var) throws InterpreterException {
			return get(var.getIRVar());
		}

		public String toString() {
			String r = "";
			for (Map.Entry<IRVar, IRValue> v : varToVal.entrySet()) {
				r += v.getKey().toString() + "=" + v.getValue().toString() + "\n";
			}
			return r;
		}
	}

	public IRValue IRModule.eval(java.util.List<IRValue> args) throws InterpreterException {
		Storage s = new Storage();
		for (IRFunction f : getIRFunctions()) {
			if (f.getIRName().getString().equals("main")) {
				return f.eval(new IRFunctionEvalCtx(s, args));
			}
		}
		return null;
	}

	class IRFunctionEvalCtx {
		java.util.List<IRValue> args;
		Storage s;
		IRValue self;

		public IRFunctionEvalCtx(Storage s, java.util.List<IRValue> args) {
			this.s = s;
			this.args = args;
			this.self = null;
		}

		public IRFunctionEvalCtx(Storage s, java.util.List<IRValue> args,
								 IRValue self) {
			this(s, args);
			this.self = self;
		}

		public IRValue getArg(int i) {
			return args.get(i);
		}

		public Storage getStore()  {
			return s;
		}

		public IRValue getSelf() {
			return self;
		}

		public boolean isMethodCtx() {
			return self != null;
		}
	}

	private long IRFunction.evalBuiltin(String op, long l, long r) throws InterpreterException {
		switch (op) {
		case BuiltinNames.INT_ADD:
			return l + r;
		case BuiltinNames.INT_SUB:
			return l - r;
		case BuiltinNames.INT_MUL:
			return l * r;
		case BuiltinNames.INT_DIV:
			if (r != 0) return l / r;
			else throw new InterpreterException("Division by 0");
		case BuiltinNames.INT_MOD:
			if (r != 0) return l % r;
			else throw new InterpreterException("Division by 0");
		case BuiltinNames.INT_LEQ:
			return l <= r ? 1 : 0;
		case BuiltinNames.INT_GEQ:
			return l >= r ? 1 : 0;
		case BuiltinNames.INT_LT:
			return l < r ? 1 : 0;
		case BuiltinNames.INT_GT:
			return l > r ? 1 : 0;
		case BuiltinNames.INT_AND:
			return (l != 0 && r != 0) ? 1 : 0;
		case BuiltinNames.INT_OR:
			return (l == 0 && r == 0) ? 0 : 1;
		default:
			throw new InterpreterException("Builtin function " + op + " cannot be evaluated.");

		}
	}

	public IRValue IRFunction.evalBuiltin(IRFunctionEvalCtx ctx) throws InterpreterException {
		switch (getIRName().getString()) {
		default:
			return null;
		case BuiltinNames.INT_ADD:
		case BuiltinNames.INT_SUB:
		case BuiltinNames.INT_MUL:
		case BuiltinNames.INT_DIV:
		case BuiltinNames.INT_MOD:
		case BuiltinNames.INT_LEQ:
		case BuiltinNames.INT_GEQ:
		case BuiltinNames.INT_LT:
		case BuiltinNames.INT_GT:
		case BuiltinNames.INT_AND:
		case BuiltinNames.INT_OR : {
			Integer a = (Integer) ctx.getArg(0).getValue();
			Integer b = (Integer) ctx.getArg(1).getValue();
			// TODO: change the internal representation from Integer (32-bit) to Long (64-bit)
			return new IRValue(getIRTypeRef(), (Integer)(int)evalBuiltin(getIRName().getString(), a, b));
		}
		case BuiltinNames.ANY_EQ:
		case BuiltinNames.ANY_NEQ:
			Object a = ctx.getArg(0).getValue();
			Object b = ctx.getArg(1).getValue();
			int r = a.equals(b) ? 1 : 0;
			if (getIRName().getString().equals(BuiltinNames.ANY_NEQ))
				r = 1 - r;
			return new IRValue(getIRTypeRef(), Integer.valueOf(r));
		}
	}

	public IRValue IRFunction.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		if (getNumIRCodeBB() == 0)
			return evalBuiltin(ctx);

		dbgi("entering function");
		dbgi(toString());
		dbgi(ctx.getStore().toString());

		IRCodeBB currentBB = getIRCodeBB(0);
		while (true) {
			currentBB.eval(ctx);

			if (currentBB.getIRCodeExit() instanceof IRReturn) {
				IRVarRef rv = ((IRReturn)(currentBB.getIRCodeExit())).getIRVarRef();
				dbgi("exec " + currentBB.getIRCodeExit() + " ret=" + ctx.getStore().get(rv));
				return ctx.getStore().get(rv);
			} else if (currentBB.getIRCodeExit() instanceof IRJump) {
				IRJump ji = (IRJump) currentBB.getIRCodeExit();
				currentBB = ji.getIRCodeBBRef().getIRCodeBB();
				dbgi("exec " + ji);
			} else {
				IRBranch bi = (IRBranch) currentBB.getIRCodeExit();
				// TODO: check TEAL types here, instead of Java types
				IRValue cond = ctx.getStore().get(bi.getCond());
				dbgi("exec " + bi + " cond=" + cond);
				if (!(cond.getValue() instanceof Integer))
					throw new InterpreterException("Condition expected to be integer");
				Integer icond = (Integer) cond.getValue();
				if (icond == 0) {
					currentBB = bi.getFalseTarget().getIRCodeBB();
				} else {
					currentBB = bi.getTrueTarget().getIRCodeBB();
				}
			}
		}
	}

	public void IRCodeBB.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		for (IRInsn i : getIRInsns()) {
			i.eval(ctx);
		}
	}

	// Instructions
	public void IRInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		throw new NotYetImplementedError(this.getClass() + " Instruction evaluation not implemented.");
	}

	public void IRCopyInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), ctx.getStore().get(getSrc()));
	}

	public void IRArgInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), ctx.getArg(getIndex()));
	}

	public void IRCallInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		IRFunction callee = getIRFunRef().getIRFunction();
		if (callee.getNumParamType() != getNumArg())
			throw new InterpreterException("Mismatch between declared and actual number of arguments.");
		ArrayList<IRValue> actuals = new ArrayList<>();
		for (IRVarRef arg : getArgs()) {
			IRValue v = ctx.getStore().get(arg);
			actuals.add(v);
		}

		// TODO: implement a storage for global variables
		IRFunctionEvalCtx calleeCtx = new IRFunctionEvalCtx(new Storage(), actuals);
		IRValue retVal = callee.eval(calleeCtx);

		ctx.getStore().set(getDst(), retVal);
	}

	public void IRDispatchInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		IRFunction callee = getIRFunRef().getIRFunction();
		if (callee.getNumParamType() != getNumArg())
			throw new InterpreterException("Mismatch between declared and actual number of arguments.");
		ArrayList<IRValue> actuals = new ArrayList<>();
		for (IRVarRef arg : getArgs()) {
			IRValue v = ctx.getStore().get(arg);
			actuals.add(v);
		}

		// lookup the value of base in the store and provide that as self argument
		IRValue self = ctx.getStore().get(getBase());

		IRFunctionEvalCtx calleeCtx = new IRFunctionEvalCtx(new Storage(), actuals, self);
		IRValue retVal = callee.eval(calleeCtx);

		ctx.getStore().set(getDst(), retVal);
	}

	public void IRNewInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		if (getIRTypeRef() instanceof IRTypeFormalRef) {
			// class C[T] { ... new T() ... } is not supported
			throw new InterpreterException("Can't evaluate formal type parameter " + getIRTypeRef());
		} else {
			// class C[T] { ... new Box[T]() ... } and also
			// new Map<int, int>
			IRTypeInstanceRef type = (IRTypeInstanceRef) getIRTypeRef();
			if (type.getIRType().getNumIRTypeFormal() != type.getNumTypeActual())
				throw new InterpreterException("Can't instantiate formal parameters of type " + type.getIRType());

			IRTypeContext tctx = new IRTypeContext(type.getIRType());
			for (int i = 0; i < type.getIRType().getNumIRTypeFormal(); ++i) {
				IRTypeInstanceRef actual;
				if (type.getTypeActual(i) instanceof IRTypeFormalRef) {
					// we need a method context to be able to evaluate type formals
					if (!ctx.isMethodCtx())
						throw new InterpreterException("Can't evaluate formal type parameter " + type.getTypeActual(i));
					IRInstance instance = (IRInstance) ctx.getSelf().getValue();
					// lookup what types is bound to the current actual
					actual = instance.getTypeCtx().lookup(((IRTypeFormalRef) type.getTypeActual(i)).getIRTypeFormal());
				} else {
					actual = (IRTypeInstanceRef) type.getTypeActual(i);
				}
				tctx.bind(type.getIRType().getIRTypeFormal(i), actual);
			}

			IRValue val = new IRValue(type, new IRInstance(tctx, new Storage()));
			// wrap it as an IRValue an return it
			ctx.getStore().set(getDst(), val);
		}
	}

	public void IRLoadInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		// extract the instance storage
		IRInstance instance = (IRInstance) ctx.getStore().get(getBase()).getValue();
		// return the value from the storage
		ctx.getStore().set(getDst(), instance.getStore().get(getField()));
	}

	public void IRStoreInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		// extract the instance storage
		IRInstance instance = (IRInstance) ctx.getStore().get(getBase()).getValue();
		// set the value in the instance storage
		instance.getStore().set(getField(), ctx.getStore().get(getSrc()));
	}

	public void IRConstantInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), getSrc().asIRValue());
	}

	public void IRSelfInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		if (!ctx.isMethodCtx())
			throw new InterpreterException("Attempt to execute 'self' instruction outside a method.");
		ctx.getStore().set(getDst(), ctx.getSelf());
	}

	// Constants
	syn IRValue IRConstant.asIRValue();
	eq IRString.asIRValue() = new IRValue(getModule().makeStringTypeRef(), getValue());
	eq IRInteger.asIRValue() = new IRValue(new IRIntTypeRef(), getValue());
	eq IRNull.asIRValue() = new IRValue(new IRAnyTypeRef(), null);
}
