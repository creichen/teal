import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import lang.ast.NotYetImplementedError;
import lang.ast.BuiltinNames;
import static lang.common.Debug.dbgi;

aspect IRInterpreter {
	public class InterpreterException extends Exception {
		InterpreterException(String e) {
			super(e);
		}
	}

	public class NullDereferenceException extends InterpreterException {
		IRValue v;
		lang.ir.ASTNode op;

		NullDereferenceException(IRValue v, lang.ir.ASTNode op) {
			super("Null dereference");
			this.v = v;
			this.op = op;
		}
	}

	public class IncompatibleTypeException extends InterpreterException {
		IRValue v;
		lang.ir.ASTNode op;

		IncompatibleTypeException(IRValue v, lang.ir.ASTNode op) {
			super("Null dereference");
			this.v = v;
			this.op = op;
		}
	}

	public class IRConcreteType {
		private IRType type;
		private Map<IRTypeFormal, IRTypeInstanceRef> bindings = new HashMap<>();

		public IRConcreteType(IRType type) {
			this.type = type;
		}

		public void bind(IRTypeFormal formal, IRTypeInstanceRef actual) {
			bindings.put(formal, actual);
		}

		public IRTypeInstanceRef lookup(IRTypeFormal formal) {
			return bindings.get(formal);
		}

		public boolean allTypeVariablesAreBound() {
			for (IRTypeFormal f : type.getIRTypeFormals()) {
				if (!bindings.containsKey(f))
					return false;
			}
			return true;
		}
	}

	public class VirtualMethodTable {
		Map<IRFunction, IRFunction> overridenBy = new HashMap<>();

		public void overrides(IRFunction func, IRFunction overridenFunc) {
			overridenBy.put(overridenFunc, func);
		}

		public void join(VirtualMethodTable vt) {
			for (Map.Entry<IRFunction, IRFunction> p : vt.overridenBy.entrySet()) {
				IRFunction f = p.getKey();
				IRFunction g = p.getValue();

				// f is overriden by g and g is overrided by g', then f is overriden by g'
				if (overridenBy.containsKey(g)) {
				   g = overridenBy.get(g);
				}

				if (!overridenBy.containsKey(f)) {
					overridenBy.put(f, g);
				} else if (overridenBy.get(f) != g) {
					throw new RuntimeException("Method overriden twice, along different paths of the inheritance tree");
				}
			}
		}

		public IRFunction lookup(IRFunction f) {
			if (overridenBy.containsKey(f))
				return overridenBy.get(f);
			return f;
		}
	}

	syn boolean IRFunction.overrides(IRFunction other) {
		// TODO: this uses only the name to check if a function overrides
		// another; maybe we want something fancier?
		return getIRName().getString().equals(other.getIRName().getString());
	}

	syn VirtualMethodTable IRClass.getVTable() {
		VirtualMethodTable vtable = new VirtualMethodTable();
		java.util.List<IRFunction> superFuncs = new ArrayList<>();
		for (IRTypeRef superRef : getSupers()) {
			IRClass superClass = (IRClass) ((IRTypeInstanceRef) superRef).getIRType();
			for (IRFunction f : superClass.getIRFunctions())
				superFuncs.add(f);
		}

		// TODO: this is quadratic, but it's easy to implement
		for (IRFunction f : getIRFunctions()) {
			for (IRFunction superf : superFuncs) {
				if (f.overrides(superf)) {
					vtable.overrides(f, superf);
				}
			}
		}

		// join in the virtual tables of the super classes
		for (IRTypeRef superRef : getSupers()) {
			IRClass superClass = (IRClass) ((IRTypeInstanceRef) superRef).getIRType();
			vtable.join(superClass.getVTable());
		}

		return vtable;
	}

	public class IRValue {
		private IRConcreteType type;
		public IRValue(IRConcreteType type) {
			this.type = type;
		}

		public boolean isNull() {
			return false;
		}

		public IRConcreteType getType() {
			return type;
		}
	}

	public class IRObject extends IRValue {
		private Storage store = new Storage();
		private VirtualMethodTable vtable;

		public IRObject(IRConcreteType type, VirtualMethodTable vtable) {
			super(type);
			this.vtable = vtable;
		}

		public Storage getStore() {
			return store;
		}

		public VirtualMethodTable getVTable() {
			return vtable;
		}
	}

	public class IRIntegerValue extends IRValue {
		private long val;
		public IRIntegerValue(long val) {
			super(null);
			this.val = val;
		}
		public long asLong() {
			return val;
		}
		@Override public String toString() {
			return val + " : " + "int";
		}
	}

	public class IRStringValue extends IRValue {
		private String val;
		public IRStringValue(String val) {
			super(null);
			this.val = val;
		}
		public String asString() {
			return val;
		}
		@Override public String toString() {
			return "\"" + val + "\" : " + "string";
		}
	}

	public class IRNullValue extends IRValue {
		public IRNullValue(IRConcreteType type) {
			super(type);
		}
		public boolean isNull() {
			return true;
		}
	}

	class Storage {
		private HashMap<IRVar, IRValue> varToVal;
		public Storage() {
			varToVal = new HashMap<IRVar, IRValue>();
		}

		public void set(IRVar var, IRValue val) {
			varToVal.put(var, val);
		}

		public IRValue get(IRVar var) throws InterpreterException {
			IRValue val = varToVal.get(var);
			if (val == null)
				throw new InterpreterException("IR value " + var.getIRName().getString() + " is not present in storage. ");
			return val;
		}

		public void set(IRVarRef var, IRValue  val)  {
			set(var.getIRVar(), val);
		}

		public IRValue get(IRVarRef var) throws InterpreterException {
			return get(var.getIRVar());
		}

		public String toString() {
			String r = "";
			for (Map.Entry<IRVar, IRValue> v : varToVal.entrySet()) {
				r += v.getKey().toString() + "=" + v.getValue().toString() + "\n";
			}
			return r;
		}
	}

	public IRValue IRModule.eval(java.util.List<IRValue> args) throws InterpreterException {
		Storage s = new Storage();
		for (IRFunction f : getIRFunctions()) {
			if (f.getIRName().getString().equals("main")) {
				return f.eval(new IRFunctionEvalCtx(s, args));
			}
		}
		return null;
	}

	class IRFunctionEvalCtx {
		java.util.List<IRValue> args;
		Storage s;
		IRValue self;

		public IRFunctionEvalCtx(Storage s, java.util.List<IRValue> args) {
			this.s = s;
			this.args = args;
			this.self = null;
		}

		public IRFunctionEvalCtx(Storage s, java.util.List<IRValue> args,
								 IRValue self) {
			this(s, args);
			this.self = self;
		}

		public IRValue getArg(int i) {
			return args.get(i);
		}

		public Storage getStore()  {
			return s;
		}

		public IRValue getSelf() {
			return self;
		}

		public boolean isMethodCtx() {
			return self != null;
		}
	}

	private long IRFunction.evalBuiltin(String op, long l, long r) throws InterpreterException {
		switch (op) {
		case BuiltinNames.INT_ADD:
			return l + r;
		case BuiltinNames.INT_SUB:
			return l - r;
		case BuiltinNames.INT_MUL:
			return l * r;
		case BuiltinNames.INT_DIV:
			if (r != 0) return l / r;
			else throw new InterpreterException("Division by 0");
		case BuiltinNames.INT_MOD:
			if (r != 0) return l % r;
			else throw new InterpreterException("Division by 0");
		case BuiltinNames.INT_LEQ:
			return l <= r ? 1 : 0;
		case BuiltinNames.INT_GEQ:
			return l >= r ? 1 : 0;
		case BuiltinNames.INT_LT:
			return l < r ? 1 : 0;
		case BuiltinNames.INT_GT:
			return l > r ? 1 : 0;
		case BuiltinNames.INT_AND:
			return (l != 0 && r != 0) ? 1 : 0;
		case BuiltinNames.INT_OR:
			return (l == 0 && r == 0) ? 0 : 1;
		default:
			throw new InterpreterException("Builtin function " + op + " cannot be evaluated.");

		}
	}

	public IRValue IRFunction.evalBuiltin(IRFunctionEvalCtx ctx) throws InterpreterException {
		switch (getIRName().getString()) {
		default:
			throw new InterpreterException("Can't evaluate builtin, " + getIRName() + ".");
		case BuiltinNames.INT_ADD:
		case BuiltinNames.INT_SUB:
		case BuiltinNames.INT_MUL:
		case BuiltinNames.INT_DIV:
		case BuiltinNames.INT_MOD:
		case BuiltinNames.INT_LEQ:
		case BuiltinNames.INT_GEQ:
		case BuiltinNames.INT_LT:
		case BuiltinNames.INT_GT:
		case BuiltinNames.INT_AND:
		case BuiltinNames.INT_OR : {
			if (!(ctx.getArg(0) instanceof IRIntegerValue)) {
				throw new IncompatibleTypeException(ctx.getArg(0), this);
			}
			if (!(ctx.getArg(1) instanceof IRIntegerValue)) {
				throw new IncompatibleTypeException(ctx.getArg(1), this);
			}
			long a = ((IRIntegerValue) ctx.getArg(0)).asLong();
			long b = ((IRIntegerValue) ctx.getArg(1)).asLong();
			return new IRIntegerValue(evalBuiltin(getIRName().getString(), a, b));
		}
		case BuiltinNames.ANY_EQ:
		case BuiltinNames.ANY_NEQ:
			long trueValue = (getIRName().getString() == BuiltinNames.ANY_EQ) ? 1 : 0;
			long falseValue = 1 - trueValue;

			if (ctx.getArg(0).isNull() != ctx.getArg(1).isNull()) {
				// one argument is null, the other is not
				// null != non-null
				return new IRIntegerValue(falseValue);
			}
			if (ctx.getArg(1).isNull()) {
				// both arguments are null, return true
				// null == null
				return new IRIntegerValue(trueValue);
			}
			// both are not null
			if (ctx.getArg(0) instanceof IRIntegerValue && ctx.getArg(1) instanceof IRIntegerValue) {
				// value equality for integers
				return new IRIntegerValue(((IRIntegerValue) ctx.getArg(0)).asLong() ==
										  ((IRIntegerValue) ctx.getArg(1)).asLong() ? trueValue : falseValue);
			} else {
				// object identity equality for everything else
				return new IRIntegerValue(ctx.getArg(0) == ctx.getArg(1) ? trueValue : falseValue);
			}
		}
	}

	public IRValue IRFunction.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		if (getNumIRCodeBB() == 0)
			return evalBuiltin(ctx);

		dbgi("entering function");
		dbgi(toString());
		dbgi(ctx.getStore().toString());

		IRCodeBB currentBB = getIRCodeBB(0);
		while (true) {
			currentBB.eval(ctx);

			if (currentBB.getIRCodeExit() instanceof IRReturn) {
				IRVarRef rv = ((IRReturn)(currentBB.getIRCodeExit())).getIRVarRef();
				dbgi("exec " + currentBB.getIRCodeExit() + " ret=" + ctx.getStore().get(rv));
				return ctx.getStore().get(rv);
			} else if (currentBB.getIRCodeExit() instanceof IRJump) {
				IRJump ji = (IRJump) currentBB.getIRCodeExit();
				currentBB = ji.getIRCodeBBRef().getIRCodeBB();
				dbgi("exec " + ji);
			} else {
				IRBranch bi = (IRBranch) currentBB.getIRCodeExit();
				// TODO: check TEAL types here, instead of Java types
				IRValue cond = ctx.getStore().get(bi.getCond());
				dbgi("exec " + bi + " cond=" + cond);
				if (!(cond instanceof IRIntegerValue))
					throw new InterpreterException("Condition expected to be integer");
				if (((IRIntegerValue)cond).asLong() == 0) {
					currentBB = bi.getFalseTarget().getIRCodeBB();
				} else {
					currentBB = bi.getTrueTarget().getIRCodeBB();
				}
			}
		}
	}

	public void IRCodeBB.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		for (IRInsn i : getIRInsns()) {
			i.eval(ctx);
		}
	}

	// Instructions
	public void IRInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		throw new NotYetImplementedError(this.getClass() + " Instruction evaluation not implemented.");
	}

	public void IRCopyInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), ctx.getStore().get(getSrc()));
	}

	public void IRArgInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), ctx.getArg(getIndex()));
	}

	public void IRCallInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		IRFunction callee = getIRFunRef().getIRFunction();
		if (callee.getNumParamType() != getNumArg())
			throw new InterpreterException("Mismatch between declared and actual number of arguments.");
		ArrayList<IRValue> actuals = new ArrayList<>();
		for (IRVarRef arg : getArgs()) {
			IRValue v = ctx.getStore().get(arg);
			actuals.add(v);
		}

		// TODO: implement a storage for global variables
		IRFunctionEvalCtx calleeCtx = new IRFunctionEvalCtx(new Storage(), actuals);
		IRValue retVal = callee.eval(calleeCtx);

		ctx.getStore().set(getDst(), retVal);
	}

	public void IRDispatchInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		// lookup the value of base in the store and provide that as self argument
		IRObject self = (IRObject) ctx.getStore().get(getBase());
		IRFunction callee = getIRFunRef().getIRFunction();

		// remap the callee through the vTable
		callee = self.getVTable().lookup(callee);

		if (callee.getNumParamType() != getNumArg())
			throw new InterpreterException("Mismatch between declared and actual number of arguments.");
		ArrayList<IRValue> actuals = new ArrayList<>();
		for (IRVarRef arg : getArgs()) {
			IRValue v = ctx.getStore().get(arg);
			actuals.add(v);
		}

		IRFunctionEvalCtx calleeCtx = new IRFunctionEvalCtx(new Storage(), actuals, self);
		IRValue retVal = callee.eval(calleeCtx);

		ctx.getStore().set(getDst(), retVal);
	}

	public void IRNewInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		if (getIRTypeRef() instanceof IRTypeFormalRef) {
			// class C[T] { ... new T() ... } is not supported
			throw new InterpreterException("Can't evaluate formal type parameter " + getIRTypeRef());
		} else {
			// class C[T] { ... new Box[T]() ... } and also
			// new Map<int, int>
			IRTypeInstanceRef type = (IRTypeInstanceRef) getIRTypeRef();
			if (type.getIRType().getNumIRTypeFormal() != type.getNumTypeActual())
				throw new InterpreterException("Can't instantiate formal parameters of type " + type.getIRType());

			IRConcreteType tctx = new IRConcreteType(type.getIRType());
			for (int i = 0; i < type.getIRType().getNumIRTypeFormal(); ++i) {
				IRTypeInstanceRef actual;
				if (type.getTypeActual(i) instanceof IRTypeFormalRef) {
					// we need a method context to be able to evaluate type formals
					if (!ctx.isMethodCtx())
						throw new InterpreterException("Can't evaluate formal type parameter " + type.getTypeActual(i));
					IRObject instance = (IRObject) ctx.getSelf();
					// lookup what types is bound to the current actual
					actual = instance.getType().lookup(((IRTypeFormalRef) type.getTypeActual(i)).getIRTypeFormal());
				} else {
					actual = (IRTypeInstanceRef) type.getTypeActual(i);
				}
				tctx.bind(type.getIRType().getIRTypeFormal(i), actual);
			}

			IRValue val = new IRObject(tctx, ((IRClass) type.getIRType()).getVTable());
			ctx.getStore().set(getDst(), val);
		}
	}

	public void IRLoadInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		// extract the instance storage
		IRObject instance = (IRObject) ctx.getStore().get(getBase());
		// return the value from the storage
		ctx.getStore().set(getDst(), instance.getStore().get(getField()));
	}

	public void IRStoreInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		// extract the instance storage
		IRObject instance = (IRObject) ctx.getStore().get(getBase());
		// set the value in the instance storage
		instance.getStore().set(getField(), ctx.getStore().get(getSrc()));
	}

	public void IRConstantInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), getSrc().asIRValue());
	}

	public void IRSelfInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		if (!ctx.isMethodCtx())
			throw new InterpreterException("Attempt to execute 'self' instruction outside a method.");
		ctx.getStore().set(getDst(), ctx.getSelf());
	}

	// Constants
	syn IRValue IRConstant.asIRValue();
	eq IRString.asIRValue() = new IRStringValue(getValue());
	eq IRInteger.asIRValue() = new IRIntegerValue(getValue());
	eq IRNull.asIRValue() = new IRNullValue(null);
}
