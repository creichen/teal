import java.util.HashMap;
import java.util.ArrayList;
import lang.ast.NotYetImplementedError;

aspect IRInterpreter {
	class InterpreterException extends Exception {
		InterpreterException(String e) {
			super(e);
		}
	}

	class IRValue {
		private IRType dynamicType;
		private Object value;

		public IRValue(IRType type, Object value) {
			this.dynamicType = type;
			this.value = value;
		}

		public IRType getDynType() {
			return dynamicType;
		}

		public Object getValue() {
			return value;
		}
	}


	class Storage {
		private HashMap<IRVar, IRValue> varToVal;
		public Storage() {
			varToVal = new HashMap<IRVar, IRValue>();
		}

		public void set(IRVar var, IRValue val) {
			varToVal.put(var, val);
		}

		public IRValue get(IRVar var) throws InterpreterException {
			IRValue val = varToVal.get(var);
			if (val == null)
				throw new InterpreterException("IR value " + var.getIRName().getString() + " is not present in storage. ");
			return val;
		}

		public void set(IRVarRef var, IRValue  val)  {
			set(var.getIRVar(), val);
		}

		public IRValue get(IRVarRef var) throws InterpreterException {
			return get(var.getIRVar());
		}
	}

	public void IRModule.eval(java.util.List<IRValue> args) throws InterpreterException {
		Storage s = new Storage();
		for (IRFunction f : getIRFunctions()) {
			if (f.getIRName().getString() == "main") {
				f.eval(new IRFunctionEvalCtx(s, args));
				return;
			}
		}
	}

	class IRFunctionEvalCtx {
		java.util.List<IRValue> args;
		Storage s;

		public IRFunctionEvalCtx(Storage s, java.util.List<IRValue> args) {
			this.s = s;
			this.args = args;
		}

		public IRValue getArg(int i) {
			return args.get(i);
		}

		public Storage getStore()  {
			return s;
		}
	}

	public IRValue IRFunction.evalBuiltin(IRFunctionEvalCtx ctx) throws InterpreterException {
		switch(getIRName().getString()) {
		default:
			return null;
		case "__builtin_add": {
			Integer a = (Integer) ctx.getArg(0).getValue();
			Integer b = (Integer) ctx.getArg(1).getValue();
			return new IRValue(getIRTypeRef().getIRType(), a + b);
		}
		case "__builtin_sub": {
			Integer a = (Integer) ctx.getArg(0).getValue();
			Integer b = (Integer) ctx.getArg(1).getValue();
			return new IRValue(getIRTypeRef().getIRType(), a - b);
		}
		}
	}

	public IRValue IRFunction.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		if (getNumIRCodeBB() == 0)
			return evalBuiltin(ctx);

		while (true) {
			IRCodeBB currentBB = getIRCodeBB(0);
			currentBB.eval(ctx);

			if (currentBB.getIRCodeExit() instanceof IRReturn) {
				IRVarRef rv = ((IRReturn)(currentBB.getIRCodeExit())).getIRVarRef();
				return ctx.getStore().get(rv);
			} else if (currentBB.getIRCodeExit() instanceof IRJump) {
				IRJump ji = (IRJump) currentBB.getIRCodeExit();
				currentBB = ji.getIRCodeBBRef().getIRCodeBB();
			} else {
				IRBranch bi = (IRBranch) currentBB.getIRCodeExit();
				// TODO: check TEAL types here, instead of Java types
				IRValue cond = ctx.getStore().get(bi.getCond());
				if (!(cond.getValue() instanceof Integer))
					throw new InterpreterException("Condition expected to be integer");
				Integer icond = (Integer) cond.getValue();
				if (icond == 0) {
					currentBB = bi.getFalseTarget().getIRCodeBB();
				} else {
					currentBB = bi.getTrueTarget().getIRCodeBB();
				}
			}
		}
	}

	public void IRCodeBB.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		for (IRInsn i : getIRInsns()) {
			i.eval(ctx);
		}
	}

	// Instructions
	public void IRInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		throw new NotYetImplementedError("Instruction evaluation not implemented.");
	}

	public void IRCopyInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), ctx.getStore().get(getSrc()));
	}

	public void IRArgInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), ctx.getArg(getIndex()));
	}

	public void IRCallInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		IRFunction callee = getIRFunRef().getIRFunction();
		if (callee.getNumParamType() != getNumArg())
			throw new InterpreterException("Mismatch between declared and actual number of arguments.");
		ArrayList<IRValue> actuals = new ArrayList<>();
		for (IRVarRef arg : getArgs()) {
			IRValue v = ctx.getStore().get(arg);
			actuals.add(v);
		}

		IRFunctionEvalCtx calleeCtx = new IRFunctionEvalCtx(ctx.getStore(), actuals);
		IRValue retVal = callee.eval(calleeCtx);

		ctx.getStore().set(getDst(), retVal);
	}

	public void IRConstantInsn.eval(IRFunctionEvalCtx ctx) throws InterpreterException {
		ctx.getStore().set(getDst(), getSrc().asIRValue());
	}

	// Constants
	syn IRValue IRConstant.asIRValue();
	eq IRString.asIRValue() = new IRValue(getModule().StringType, getValue());
	eq IRInteger.asIRValue() = new IRValue(getModule().IntegerType, getValue());
}
