import java.io.PrintStream;
import java.util.Iterator;

aspect IRPrint {
	protected static <T extends ASTNode>
	void ASTNode.printCollection(Iterable<T> collection, String pre, String post, String delim, PrintStream out) {
		Iterator<T> itr = collection.iterator();
		out.print(pre);
		if (itr.hasNext())
			itr.next().print(out);
		if (!itr.hasNext()) {
			out.print(post);
			return;
		}
		while(itr.hasNext()) {
			out.print(delim);
			itr.next().print(out);
		}
		out.print(post);
	}

	public void ASTNode.print(PrintStream out) {
		out.print("*** not implemented ***");
	}

	public void IRModule.print(PrintStream out) {
		out.print("module ");
		printCollection(getIRModuleName().getIRNames(), "", "", ".", out);

		out.println();
		out.println();

		for (IRVar v : getIRVars())
			v.print(out);

		out.println();
		for (IRType t : getIRTypes())
			t.print(out);

		for (IRFunction f : getIRFunctions())
			f.print(out);

		out.println();
	}

	public void IRFunction.print(PrintStream out) {
		out.print("function ");
		getIRTypeRef().print(out);
		out.print(" @" + getIRName().getString());

		printCollection(getParamTypes(), "(", ")", ", ", out);
		out.print(" {\n\t");
		printCollection(getLocals(), "", "", "\n\t", out);
		out.print("\n");
		printCollection(getIRCodeBBs(), "", "", "\n", out);

		out.println("\n}\n");
	}

	public void IRTypeRef.print(PrintStream out) {
		out.print(getIRType().getIRName().getString());
	}

	public void IRVar.print(PrintStream out) {
		getIRName().print(out);
		out.print(" : ");
		getIRTypeRef().print(out);
	}

	public void IRCodeBB.print(PrintStream out) {
		out.println(label() + ":");
		for (IRInsn i : getIRInsns()) {
			out.print("\t");
			i.print(out);
			out.println();
		}
		out.print("\t");
		getIRCodeExit().print(out);
		// out.println();
	}

	// Terminators
	public void IRReturn.print(PrintStream out) {
		out.print("ret ");
		getIRVarRef().print(out);
	}

	public void IRJump.print(PrintStream out) {
		out.print("j ");
		getIRCodeBBRef().print(out);
	}

	public void IRBranch.print(PrintStream out) {
		out.print("br ");
		getCond().print(out);
		out.print(", ");
		getTrueTarget().print(out);
		out.print(", ");
		getFalseTarget().print(out);
	}

	// Instructions
	public void IRCopyInsn.print(PrintStream out) {
		getDst().print(out);
		out.print(" = ");
		getSrc().print(out);
	}

	public void IRArgInsn.print(PrintStream out) {
		getDst().print(out);
		out.print(" = arg ");
		out.print(getIndex());
	}

	public void IRCallInsn.print(PrintStream out) {
		getDst().print(out);
		out.print(" = call ");
		getIRFunRef().print(out);
		printCollection(getArgs(), "(", ")", ", ", out);
	}

	public void IRConstantInsn.print(PrintStream out) {
		getDst().print(out);
		out.print(" = constant ");
	}

	// Refs
	public void IRCodeBBRef.print(PrintStream out) {
		out.print(getIRCodeBB().label());
	}

	public void IRVarRef.print(PrintStream out) {
		if (getIRVar() == null)
			out.print("undef");
		else
			getIRVar().getIRName().print(out);
	}

	public void IRName.print(PrintStream out) {
		out.print(getString());
	}

	public void IRFunRef.print(PrintStream out) {
		getIRFunction().getIRName().print(out);
	}
}
