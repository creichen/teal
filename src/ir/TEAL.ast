// Top level
IRModule ::= IRModuleName IRVar* IRType* IRClass* IRQualifier* IRTypeAlias* IRFunction*;
IRModuleName ::= IRName*;
IRVar ::= IRName IRTypeRef;

IRFunction ::= IRName IRTypeRef ParamType:IRTypeRef* IRCode;
IRCode ::= Local:IRVar* IRCodeBB*;
IRCodeBB ::= IRInsn* IRCodeExit;


// Instructions
abstract IRInsn;
IRConstantInsn : IRInsn ::= Dst:IRVarRef Src:IRConstant;

IRCopyInsn : IRInsn ::= Dst:IRVarRef Src:IRVarRef;

abstract IRAbstractLoadInsn : IRInsn ::= Dest:IRVarRef Field:IRFieldRef;
IRLoadStaticInsn : IRAbstractLoadInsn ::= IRModuleName;
IRLoadInsn : IRInsn ::= Base:IRVarRef;

abstract IRAbstractStoreInsn : IRInsn ::= Field:IRFieldRef Src:IRVarRef;
IRStoreStaticInsn : IRAbstractStoreInsn ::= IRModuleName;
IRStoreInsn : IRInsn ::= Base:IRVarRef;

abstract IRAbstractCallInsn ::= Dst:IRVarRef Arg:IRVarRef*;
IRCallInsn : IRInsn ::= IRFunRef;
IRDispatchInsn : IRInsn ::= Base:IRVarRef IRMethodRef;

IRNewInsn : IRInsn ::= Dst:IRVarRef IRTypeRef Arg:IRVarRef*;
IRNewArrayInsn : IRInsn ::= Dst:IRVarRef IRTypeRef Size:IRVarRef;

IRAssert : IRInsn ::= IRVarRef;

// Block terminators
abstract IRCodeExit;
IRReturn : IRCodeExit ::= IRVarRef;
IRJump : IRCodeExit ::=  IRBlockRef;
IRBranch : IRCodeExit ::= Cond:IRVarRef TrueTarget:IRBlockRef FalseTarget:IRBlockRef;

abstract IRConstant;
IRString : IRConstant ::= <String>;
IRInteger : IRConstant ::= <Integer>;

IRVarRef ::= <IRLocalVar>;
IRFunRef ::= <IRFunction>;
IRBlockRef ::= <IRBlock>;
IRTypeRef ::= <IRType>;

IRName ::= <String>;

// To be defined
IRFieldRef;
IRMethodRef;
IRTypeAlias;
IRClass;
IRType;
IRQualifier;