// Top level
IRModule ::= IRModuleName IRVar* IRType* IRClass* IRQualifier* IRTypeAlias* IRFunction*;
IRModuleName ::= IRName*;
IRVar ::= IRName IRTypeRef;

IRFunction ::= IRName IRTypeRef ParamType:IRTypeRef* Local:IRVar* IRCodeBB*;
IRCodeBB ::= IRInsn* IRCodeExit;

// Instructions
abstract IRInsn;
IRConstantInsn : IRInsn ::= Dst:IRVarRef Src:IRConstant;

// Instruction to access the i-th argument
IRArgInsn : IRInsn ::= Dst:IRVarRef <Index:Integer>;

// Copy instruction
IRCopyInsn : IRInsn ::= Dst:IRVarRef Src:IRVarRef;

abstract IRAbstractLoadInsn : IRInsn ::= Dst:IRVarRef;
IRLoadStaticInsn : IRAbstractLoadInsn ::= Src:IRVarRef;
IRLoadInsn : IRAbstractLoadInsn ::= Base:IRVarRef Field:IRVarRef;

abstract IRAbstractStoreInsn : IRInsn ::= Src:IRVarRef;
IRStoreStaticInsn : IRAbstractStoreInsn ::= IRModuleName;
IRStoreInsn : IRAbstractStoreInsn ::= Base:IRVarRef Field:IRVarRef;

abstract IRAbstractCallInsn : IRInsn ::= Dst:IRVarRef Arg:IRVarRef* IRFunRef;
IRCallInsn : IRAbstractCallInsn;
IRDispatchInsn : IRAbstractCallInsn ::= Base:IRVarRef;

IRNewInsn : IRInsn ::= Dst:IRVarRef IRTypeRef;
IRNewArrayInsn : IRInsn ::= Dst:IRVarRef IRTypeRef Size:IRVarRef;

IRSelfInsn : IRInsn ::= Dst:IRVarRef;

IRAssert : IRInsn ::= IRVarRef;

// Block terminators
abstract IRCodeExit;
IRReturn : IRCodeExit ::= IRVarRef;
IRJump : IRCodeExit ::=  IRCodeBBRef;
IRBranch : IRCodeExit ::= Cond:IRVarRef TrueTarget:IRCodeBBRef FalseTarget:IRCodeBBRef;

abstract IRConstant;
IRString : IRConstant ::= <Value:String>;
IRInteger : IRConstant ::= <Value:Long>;
IRNull : IRConstant;

IRVarRef ::= <IRVar:IRVar>;
IRFunRef ::= <IRFunction:IRFunction>;
IRCodeBBRef ::= <IRCodeBB:IRCodeBB>;

// Type reference
abstract IRTypeRef;
IRTypeInstanceRef : IRTypeRef ::= <IRType:IRType> TypeActual:IRTypeRef* IRQualifierRef*;
IRTypeFormalRef : IRTypeRef ::= <IRTypeFormal:IRTypeFormal>;
abstract IRFundamentalTypeRef : IRTypeRef;
IRIntTypeRef : IRFundamentalTypeRef;
IRAnyTypeRef : IRFundamentalTypeRef;

// Qualifier reference
IRQualifierRef ::= <IRQualifier:IRQualifier>;

// Types
abstract IRType ::= IRName IRTypeFormal*;

// Class
IRClass : IRType ::= Super:IRTypeRef* [Constructor:IRFunction] IRFunction* IRVar*;

IRName ::= <String>;

// To be defined
IRFieldRef;
IRMethodRef;
IRTypeAlias;

IRModuleRef ::= <IRModule:IRModule>;
IRTypeFormal ::= IRName;
IRQualifier;