aspect IR {
	public IRClass IRModule.IntegerType = new IRClass().setIRName(new IRName("int"));
	public IRClass IRModule.StringType = new IRClass().setIRName(new IRName("string"));
	public IRClass IRModule.AnyType = new IRClass().setIRName(new IRName("any"));

	public IRTypeRef IRModule.makeIntegerTypeRef() {
		return new IRTypeInstanceRef(IntegerType, new List());
	}

	public IRTypeRef IRModule.makeStringTypeRef() {
		return new IRTypeInstanceRef(StringType, new List());
	}

	public IRTypeRef IRModule.makeAnyTypeRef() {
		return new IRTypeInstanceRef(AnyType, new List());
	}

	public String IRModule.defaultName = "main";

	syn nta List<IRType> IRModule.builtinTypes() {
		List<IRType> btypes = new List<>();
		btypes.add(IntegerType);
		btypes.add(StringType);
		btypes.add(AnyType);
		return btypes;
	}

	inh int IRCodeBB.getNumber();
	eq IRFunction.getIRCodeBB(int i).getNumber() = i;
	syn String IRCodeBB.label() = "bb" + getNumber();

	inh IRModule IRFunction.getModule();
	eq IRModule.getIRFunction().getModule() = this;
	inh IRModule IRConstant.getModule();

	private SourceLocation ASTNode.srcLoc = SourceLocation.UNKNOWN;
	public void ASTNode.setSourceLocation(SourceLocation srcLoc) {
		this.srcLoc = srcLoc;
	}
	public SourceLocation ASTNode.getSourceLocation() {
		return srcLoc;
	}
}
