aspect BuiltinTypes {
	public class BuiltinNames {
		public static final String INT = "int";
		public static final String STRING = "string";
		public static final String ANY = "any";
		public static final String ARRAY = "array";

		public static final String INT_ADD = "__builtin_int_add";
		public static final String INT_SUB = "__builtin_int_sub";
		public static final String INT_MUL = "__builtin_int_mul";
		public static final String INT_DIV = "__builtin_int_div";
		public static final String INT_MOD = "__builtin_int_mod";

		public static final String ANY_EQ = "__builtin_int_eq";
		public static final String ANY_NEQ = "__builtin_int_neq";
		public static final String INT_LEQ = "__builtin_int_leq";
		public static final String INT_GEQ = "__builtin_int_geq";
		public static final String INT_LT = "__builtin_int_lt";
		public static final String INT_GT = "__builtin_int_gt";

		public static final String INT_AND = "__builtin_int_logical_and";
		public static final String INT_OR = "__builtin_int_logical_or";
	}


	private Decl Program.makeBuiltinFunDecl(String name, String retType, String ...argTypes) {
		FunDecl f = new FunDecl();
		f.setIdDecl(new IdDecl(name));
		f.setType(new SimpleType(new IdUse(retType), new List()));

		int count = 0;
		for (String t : argTypes)  {
			String argName = "a" + (count++);
			f.addFormal(new VarDecl(new IdDecl(argName), new Opt(new SimpleType(new IdUse(t), new List())), new Opt()));
		}

		return f;
	}

	/**
	   Introduce the int, string, any, array[T] as builtin types.
	 **/
	syn nta List<Decl> Program.getBuiltinDeclList() {
		List<Decl> decls = new List<Decl>();
		decls
			.add(new TypeDecl().setIdDecl(new IdDecl(BuiltinNames.INT)))
			.add(new TypeDecl().setIdDecl(new IdDecl(BuiltinNames.STRING)))
			.add(new TypeDecl().setIdDecl(new IdDecl(BuiltinNames.ANY)))
			.add(new TypeDecl().setIdDecl(new IdDecl(BuiltinNames.ARRAY))
				 .setTypeFormalList(new List<TypeVarDecl>().add(new TypeVarDecl(new IdDecl("T")))));

		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_ADD, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_SUB, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_MUL, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_DIV, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_MOD, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));

		decls.add(makeBuiltinFunDecl(BuiltinNames.ANY_EQ, BuiltinNames.INT, BuiltinNames.ANY, BuiltinNames.ANY));
		decls.add(makeBuiltinFunDecl(BuiltinNames.ANY_NEQ, BuiltinNames.INT, BuiltinNames.ANY, BuiltinNames.ANY));

		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_LEQ, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_GEQ, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_LT, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_GT, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));

		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_AND, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_OR, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));

		return decls;
	}
}
