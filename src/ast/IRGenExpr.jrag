import lang.ir.*;

aspect IRGenExpr {
	public enum VariableScope {
		LOCAL,
		GLOBAL,
		MEMBER
	}

	inh VariableScope VarDecl.getScope();
	eq Program.getDecl().getScope() = VariableScope.GLOBAL;
	eq FunDecl.getFormal().getScope() = VariableScope.LOCAL;
	eq VarDeclStmt.getVarDecl().getScope() = VariableScope.LOCAL;
	eq VarDeclElt.getVarDecl().getScope() = VariableScope.MEMBER;


	syn IRVar Expr.getIRVar() {
		int uid = getUID();
		return new IRVar(new IRName("$" + uid), type().genIR());
	}

	syn IRVarRef Expr.getIRVarRef() {
		return new IRVarRef(getIRVar());
	}


	syn IRFunRef Expr.getCalledFunction() = null;
	eq Access.getCalledFunction() {
		IdDecl dd = getIdUse().lookup();
		// We have to bite the bullet and do the cast here. This
		// is translator code and the type hierarchy in the AST does not neatly
		// overlap to the hierarchy in the IR. This is to say that the diagram
		// below does not commute (where the down-arrow means translation)
		//   ASTType1   <:    ASTType2
		//     |                 |
		//     v                 v
		//   IRType1    <:    IRType2
		return new IRFunRef(((FunDecl)dd.getDecl()).genIR());
	}

	public IRVarRef Expr.genCode(IRFunctionCtx ctx) {
		throw new NotYetImplementedError("Can't translate expression.");
	}

	public IRVarRef AddExpr.genCode(IRFunctionCtx ctx) {
		IdDecl dd = lookup(BuiltinNames.INT_ADD);
		IRFunRef builtinFunc = new IRFunRef(((FunDecl)dd.getDecl()).genIR());
		IRVarRef r = ctx.getTempIRVar(this);

		IRCallInsn call = new IRCallInsn().setDst(r).setIRFunRef(builtinFunc);
		IRVarRef left = getLeft().genCode(ctx);
		IRVarRef right = getRight().genCode(ctx);
		call.addArg(left).addArg(right);

		ctx.addInsn(call);

		return r;
	}

	public IRVarRef CallExpr.genCode(IRFunctionCtx ctx) {
		Expr fun = getFunc();
		IRFunRef funCallTarget = fun.getCalledFunction();
		IRVarRef r = ctx.getTempIRVar(this);
		if (funCallTarget != null) {
			IRCallInsn call = new IRCallInsn().setDst(r);
			call.setIRFunRef(funCallTarget);
			for (Expr e : getActuals()) {
				IRVarRef arg = e.genCode(ctx);
				call.addArg(arg);
			}
			ctx.addInsn(call);
		} else {
			throw new NotYetImplementedError("Method calls are not implemented");
		}
		return r;
	}

	public IRVarRef Access.genCode(IRFunctionCtx ctx) {
		// this can be a local variable load, global variable load or member access
		IdDecl idDecl = getIdUse().lookup();
		VarDecl d = (VarDecl) idDecl.getDecl();
		IRVarRef r;
		switch (d.getScope()) {
		default:
		case MEMBER:
			throw new NotYetImplementedError("Missing implementation for member accesses");
		case LOCAL:
			r = ctx.getIRVarRef(d);
			break;
		case GLOBAL:
			r = new IRVarRef(d.genIR());
			break;
		}
		return r;
	}

	public IRVarRef IntConstant.genCode(IRFunctionCtx ctx) {
		IRVarRef r = ctx.getTempIRVar(this);
		ctx.addInsn(new IRConstantInsn(r, new IRInteger(getValue())));
		return r;
	}

	public IRVarRef StringConstant.genCode(IRFunctionCtx ctx) {
		IRVarRef r = ctx.getTempIRVar(this);
		ctx.addInsn(new IRConstantInsn(r, new IRString(getValue())));
		return r;
	}
}
