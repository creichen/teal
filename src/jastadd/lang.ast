
Program ::= Decl*;

// Declarations
abstract Decl;
FunctionDecl : Decl ::= IdUse IdDecl FormalParam:VarDecl* Stmt*;
VarDecl : Decl ::= IdUse IdDecl;
MultipleVarDecl : Decl ::= IdUse IdDecl*;

// Stmts

abstract Stmt;
DeclStmt : Stmt ::= VarDecl;
BlockStmt : Stmt ::= Stmt*;
ExprStmt : Stmt ::= Expr;
WhileStmt : Stmt ::= Cond:Expr Stmt;
IfElseStmt : Stmt ::= Cond:Expr Then:Stmt Else:Stmt;
BreakStmt : Stmt;
ContinueStmt : Stmt;
ReturnStmt : Stmt ::= Expr;

// Expressions
abstract Expr;
abstract BinExpr : Expr ::= Left:Expr Right:Expr;

AddExpr : BinExpr;
SubExpr : BinExpr;
MulExpr : BinExpr;
DivExpr : BinExpr;
ModExpr : BinExpr;
AssignExpr : BinExpr;
EQExpr : BinExpr;
LTExpr : BinExpr;
GTExpr : BinExpr;
LEQExpr : BinExpr;
GEQExpr : BinExpr;

CallExpr : Expr ::= IdUse Arg:Expr*;
IntConstant : Expr ::= <Value> ;
Variable : Expr ::= IdUse ;

// Identifiers
IdUse ::= <ID> ;
IdDecl ::= <ID> ;
