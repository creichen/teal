import java.util.Map;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Comparator;
import beaver.Symbol;

aspect SrcLoc {
	public class SrcLoc implements Comparable<SrcLoc> {
		int startLine, startCol, endLine, endCol;
		int startLoc;
		int endLoc;
		SrcLoc(int startLoc, int endLoc) {
			this.startLoc = startLoc;
			this.endLoc = endLoc;
			startLine = Symbol.getLine(startLoc);
			startCol = Symbol.getColumn(startLoc);
			endLine = Symbol.getLine(endLoc);
			endCol = Symbol.getColumn(endLoc);
		}

		public String pretty() {
			return startLine + ":" + startCol + "-" +
				endLine + ":" + endCol;
		}

		public int getStartLoc() {
			return startLoc;
		}

		@Override
		public int compareTo(SrcLoc other) {
			if (this.startLoc != other.startLoc)
				return Integer.compare(startLoc, other.startLoc);
			else
				return Integer.compare(endLoc, other.endLoc);
		}
	}


	inh int ASTNode.getParentStartLoc();
	eq ASTNode.getChild().getParentStartLoc() {
		return getStartLoc();
	}

	syn int ASTNode.getStartLoc() {
		if (getStart() != 0)
			return getStart();
		return getParentStartLoc();
	}


	inh int ASTNode.getParentEndLoc();
	eq ASTNode.getChild().getParentEndLoc() {
		return getEndLoc();
	}

	syn int ASTNode.getEndLoc() {
		if (getEnd() != 0)
			return getEnd();
		return getParentEndLoc();
	}

	syn int ASTNode.getStartLine() {
		return Symbol.getLine(getStartLoc());
	}

	syn int ASTNode.getEndLine() {
		return Symbol.getLine(getEndLoc());
	}

	syn int ASTNode.getStartCol() {
		return Symbol.getColumn(getStartLoc());
	}

	syn int ASTNode.getEndCol() {
		return Symbol.getColumn(getEndLoc());
	}

	syn SrcLoc ASTNode.getSrcLoc() {
		return new SrcLoc(getStartLoc(), getEndLoc());
	}

	syn String ASTNode.prettySrcLoc() {
		return getStartLine() + ":" + getStartCol() + "-" +
			getEndLine() + ":" + getEndCol();
	}
}
