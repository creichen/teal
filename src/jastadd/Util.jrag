import java.util.Map;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.Comparator;
import beaver.Symbol;

aspect Util {
	public class AccHashMap<K, V> extends HashMap<K, V> {
		public void add(Map.Entry<K, V> e) {
			put(e.getKey(), e.getValue());
		}
	}

	public class AccTreeMap<K, V> extends TreeMap<K, V> {
		public void add(Map.Entry<K, V> e) {
			put(e.getKey(), e.getValue());
		}
		public AccTreeMap(Comparator<? super K> c) {
			super(c);
		}
	}

	public class SrcLocComparator implements Comparator<ASTNode> {
		public int compare(ASTNode n1, ASTNode n2) {
			int startPos1 = n1.getStart();
			int startPos2 = n2.getStart();
			if (startPos1 < startPos2)
				return -1;
			else if (startPos1 > startPos2)
				return 1;
			return 0;
		}
	}
}


aspect SrcLoc {
	inh int ASTNode.getParentStartLoc();
	eq ASTNode.getChild().getParentStartLoc() {
		return getStartLoc();
	}

	syn int ASTNode.getStartLoc() {
		if (getStart() != 0)
			return getStart();
		return getParentStartLoc();
	}


	inh int ASTNode.getParentEndLoc();
	eq ASTNode.getChild().getParentEndLoc() {
		return getEndLoc();
	}

	syn int ASTNode.getEndLoc() {
		if (getEnd() != 0)
			return getEnd();
		return getParentEndLoc();
	}

	public int ASTNode.getStartLine() {
		return Symbol.getLine(getStartLoc());
	}

	public int ASTNode.getEndLine() {
		return Symbol.getLine(getEndLoc());
	}

	public int ASTNode.getStartCol() {
		return Symbol.getColumn(getStartLoc());
	}

	public int ASTNode.getEndCol() {
		return Symbol.getColumn(getEndLoc());
	}

	public String ASTNode.prettySrcLoc() {
		return getStartLine() + ":" + getStartCol() + "-" +
			getEndLine() + ":" + getEndCol();
	}
}
