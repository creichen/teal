TypeDecl type_decl = TYPE ID type_formals fun_formals_opt SEMICOLON
                           {: return new TypeDecl(new IdDecl(ID), type_formals, fun_formals_opt); :}
                   ;

TypeVarDecl type_var_decl = ID {: return new TypeVarDecl(new IdDecl(ID)); :}
                          ;

Type type_no_qual = ID type_actuals {: return new Type(new IdUse(ID), type_actuals, new List()); :}
                  ;

Type type = type_no_qual
          | type_qualifier type {: return type.addTypeQualifier(type_qualifier); :}
          ;

TypeQualifier type_qualifier = builtin_type_qualifier
                             ;

TypeQualifier builtin_type_qualifier = NONNULL {: return new NonNullQualifier(); :}
                                     ;

List type_formals = /* empty */ {: return new List(); :}
                  | LBRACK RBRACK {: return new List(); :}
                  | LBRACK type_formal_list RBRACK {: return type_formal_list; :}
                  ;

List type_formal_list = type_var_decl {: return new List(type_var_decl); :}
                      | type_formal_list COMMA type_var_decl {: return type_formal_list.add(type_var_decl); :}
                      ;


List type_actuals = /* empty */ {: return new List(); :}
                  | LBRACK RBRACK {: return new List(); :}
                  | LBRACK type_actual_list RBRACK {: return type_actual_list; :}
                  ;

List type_actual_list = type {: return new List(type); :}
                      | type_actual_list COMMA type {: return type_actual_list.add(type); :}
                      ;

List fun_formals_opt = /* empty */ {: return new List(); :}
                     | LPAREN fun_formal_list RPAREN {: return fun_formal_list; :}
                     ;
