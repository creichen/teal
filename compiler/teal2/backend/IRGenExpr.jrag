import lang.ir.*;
import lang.common.SourceLocation;
import lang.common.NotYetImplementedError;
import lang.common.BuiltinNames;

aspect IRGenExpr {
	eq TypeDecl.getTypeFormal().getScope() = VariableScope.MEMBER;
	eq TypeDecl.getFunFormal().getScope() = VariableScope.MEMBER;

	// FIXME: this oddity is only needed for NewExpr.genCode()
	syn IRTypeRef Type.genIRTypeRef() = genIR();

	public IRVarRef NewExpr.genCodeArray(IRFunctionCtx ctx) {
		IRVarRef dst = ctx.getTempIRVar(this);
		IRVarRef size = getActual(0).genCode(ctx);
		IRNewArrayInsn newInsn = new IRNewArrayInsn().setDst(dst)
			.setIRType((IRType) getType().getActual(0).genIRTypeRef()).setSize(size);
		ctx.addInsn(newInsn);
		ctx.setSourceLocations(this.sourceLocation());
		return dst;
	}

	refine IRGenExpr eq NewExpr.genCode(IRFunctionCtx ctx) {
		TypeDecl type = (TypeDecl) getType().getIdUse().lookup().getDecl();
		// generate special IR instructions for arrays
		if (type.isArray()) {
			return genCodeArray(ctx);
		}

		// allocate storage for the object
		IRVarRef dst = ctx.getTempIRVar(this);
		IRNewInsn newInsn = new IRNewInsn().setDst(dst)
			.setIRType((IRType) getType().genIR());
		ctx.addInsn(newInsn);

		ctx.setSourceLocations(this.sourceLocation());

		// generate initialization code
		if (type.getNumFunFormal() != getNumActual()) {
			throw new RuntimeException("Mismatch between the number of formal and actual parameters in " + this + ".");
		}

		for (int i = 0; i < getNumActual(); ++i) {
			Expr actual = getActual(i);
			IRVarRef tmp = actual.genCode(ctx);
			VarDecl formal = type.getFunFormal(i);
			ctx.addInsn(new IRStoreInsn().setBase(dst)
						.setField(new IRVarRef(formal.genIR())).setSrc(tmp));
			ctx.setSourceLocations(actual.sourceLocation());
		}

		// return a reference to the allocated storage
		return dst;
	}

	public void MemberAccess.genAssignment(IRVarRef rhs, IRFunctionCtx ctx) {
		Expr base = getExpr();
		TypeDefinition type = base.type();
		Decl memberDecl = type.memberLookup(getIdentifier()).getDecl();
		if (!(memberDecl instanceof VarDecl)) {
			super.genAssignment(rhs, ctx);
		}

		ctx.addInsn(new IRStoreInsn().setBase(base.genCode(ctx))
					.setField(new IRVarRef(((VarDecl)memberDecl).genIR()))
					.setSrc(rhs));

		ctx.setSourceLocations(this.sourceLocation());
	}

	public IRVarRef MemberAccess.genCode(IRFunctionCtx ctx) {
		Expr base = getExpr();
		TypeDefinition type = base.type();
		Decl memberDecl = type.memberLookup(getIdentifier()).getDecl();
		if (!(memberDecl instanceof VarDecl))
			throw new RuntimeException("Can't load a member that is not a field, " + this + ".");
		IRVarRef tmp = ctx.getTempIRVar(this);
		ctx.addInsn(new IRLoadInsn().setBase(base.genCode(ctx))
					.setField(new IRVarRef(((VarDecl) memberDecl).genIR()))
					.setDst(tmp));
		ctx.setSourceLocations(this.sourceLocation());
		return tmp;
	}
}
