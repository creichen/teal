import lang.common.BuiltinNames;

aspect BuiltinTypes {
	syn nta Decl Program.QUALIFIERDecl() = builtinType(BuiltinNames.QUALIFIER)
		.setTypeFormalList(new List<TypeVarDecl>().add(new TypeVarDecl(new IdDecl("T"))))
		.setSuperTypeList(new List<Type>())
		.setStructEltList(new List<StructElt>())
		.setFunFormalList(new List<VarDecl>());

	syn TypeDefinition Program.QUALIFIER() = this.QUALIFIERDecl().typeDefinition();

	// Constructs a built-in type.  For Teal-2+, built-in types are classes.
	syn nta ClassDecl Program.builtinType(String name) = new ClassDecl().setIdDecl(new IdDecl(name));

	refine BuiltinTypes eq Program.simpleTypeFromName(String typename) {
		return new Type(new IdUse(typename), new List(), new List());
	}

	refine BuiltinTypes eq Program.getBuiltinDeclsList() {
		return refined().add(QUALIFIERDecl());
	}

	syn boolean TypeDecl.isArray() {
		return equals(program().ARRAY());
	}

	// FIXME: general lookupDecl() and more convenient interface for that?
	syn ClassDecl Type.baseType() {
	    return (ClassDecl) getIdUse().lookup().getDecl();
	}

}
