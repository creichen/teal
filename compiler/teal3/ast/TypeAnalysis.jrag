aspect TypeAnalysis {
	public interface TypeDefinition {
		lang.ir.IRTypeRef genIRTypeRef(); // code generation only
		IdDecl memberLookup(String name);
	}

	TypeDecl implements TypeDefinition;
	TypeVarDecl implements TypeDefinition;

	syn TypeDefinition Expr.type() = getBuiltinClassDecl(BuiltinNames.ANY);
	eq IntConstant.type() = getBuiltinClassDecl(BuiltinNames.INT);
	eq StringConstant.type() = getBuiltinClassDecl(BuiltinNames.STRING);
	eq TypedExpr.type() {
		return (TypeDefinition) getType().getIdUse().lookup().getDecl();
	}
	eq Access.type() {
		VarDecl d = (VarDecl) getIdUse().lookup().getDecl();
		if (d.hasType())
			return (TypeDefinition) d.getType().decl();
		return getBuiltinClassDecl(BuiltinNames.ANY);
	}

	syn TypeDefinition Decl.type() = null;
	eq VarDecl.type() {
		if (hasType())
			return (TypeDefinition) getType().getIdUse().lookup().getDecl();
		if (hasInitializer())
			return getInitializer().type();
		return getBuiltinClassDecl(BuiltinNames.ANY);
	}
	eq FunDecl.type() {
		if (hasType())
			return (TypeDefinition) getType().getIdUse().lookup().getDecl();
		return getBuiltinClassDecl(BuiltinNames.ANY);
	}
}
