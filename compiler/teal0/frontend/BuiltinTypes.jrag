import lang.common.BuiltinNames;

/**
 * Add built-in operations to the AST, so that name analysis and type analysis
 * can process them as if they were user-defined operations
 */
aspect BuiltinTypes {
	inh Program ASTNode.program();
	eq Program.getChild().program() = this;
	eq Program.getBuiltinDecls().program() = this;

	/**
	 * Map type names (strings) to types.
	 *
	 * Used by makeBuiltinFunDecl to assign types to the built-in operators.
	 * Approximates array types.
	 *
	 * @param typename Name of the type to approximate
	 * @return A Type object.
	 */
	syn Type Program.simpleTypeFromName(String typename) {
		switch (typename) {
		case BuiltinNames.INT:
			return new IntType();
		case BuiltinNames.STRING:
			return new StringType();
		case BuiltinNames.ARRAY:
			// IMPRECISION: Since Teal-0 can't express type variables, we cannot
			// represent "array-of-anything" in the AST.
			//
			// This affects one built-in operation:
			//    array_length : array[T] -> int
			// will get the imprecise type
			//    array_length : any -> int
			return new AnyType();
		case BuiltinNames.ANY:
			return new AnyType();
		default:
			throw new RuntimeException("Can't build type from unexpected type name " + typename);
		}
	}

	/**
	 * Transform a builtin operation (addition, subtraction etc.) into a "pseudo-Decl"
	 *
	 * @param op: The operation to transform
	 * @return A Decl that declares the built-in operation as if it had been declared by the source program
	 */
	private Decl Program.makeBuiltinFunDecl(BuiltinNames.Operation op) {
		//String name, String retType, String ...argTypes) {
		FunDecl f = new FunDecl();
		f.setIdDecl(new IdDecl(op.getName()));
		f.setDeclaredReturnType(simpleTypeFromName(op.getReturnType()));

		int count = 0;
		for (String t : op.getArgumentTypes())  {
			String argName = "a" + (count++);
			f.addFormal(new VarDecl(new IdDecl(argName), new Opt(simpleTypeFromName(t)), new Opt()));
		}

		return f;
	}

	/**
	 * Extracts a list of all built-in operations (as listed in BuiltinNames.java and defined in Builtins.java)
	 */
	syn nta List<Decl> Program.getBuiltinDeclsList() {
		List<Decl> decls = new List<Decl>();

		// Extract builtin operations directly from their specification
		for (BuiltinNames.Operation op : BuiltinNames.getOperations()) {
			decls.add(makeBuiltinFunDecl(op));
		}
		return decls;
	}

	// ----------------------------------------
	// Checks for specific built-in types

	syn boolean Type.isArray() = false;
	eq ArrayType.isArray() = true;
}
