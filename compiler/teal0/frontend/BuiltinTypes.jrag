import lang.common.BuiltinNames;

aspect BuiltinTypes {
	inh Program ASTNode.program();
	eq Program.getChild().program() = this;
	eq Program.getBuiltinDecls().program() = this;

	syn Type Program.simpleTypeFromName(String typename) {
		switch (typename) {
		case BuiltinNames.INT:
			return new IntType();
		case "string":
			return new StringType();
		case "array":
		    // FIXME: we don't have parametric types here, so we must change the types of
		    // functions that operate over arrays to use "any".
		    // This is fine, as long as we don't do any type checking or inference...
		    return new AnyType();
		case "any":
			return new AnyType();
		default:
			throw new RuntimeException("Can't build type from name " + typename);
		}
	}

	private Decl Program.makeBuiltinFunDecl(BuiltinNames.Operation op) {
		//String name, String retType, String ...argTypes) {
		FunDecl f = new FunDecl();
		f.setIdDecl(new IdDecl(op.getName()));
		f.setDeclaredReturnType(simpleTypeFromName(op.getReturnType()));

		int count = 0;
		for (String t : op.getArgumentTypes())  {
			String argName = "a" + (count++);
			f.addFormal(new VarDecl(new IdDecl(argName), new Opt(simpleTypeFromName(t)), new Opt()));
		}

		return f;
	}

	/**
	 * Extracts a list of all built-in operations (as listed in BuiltinNames.java and defined in Builtins.java)
	 */
	syn nta List<Decl> Program.getBuiltinDeclsList() {
		List<Decl> decls = new List<Decl>();

		// Extract builtin operations directly from their specification
		for (BuiltinNames.Operation op : BuiltinNames.getOperations()) {
			decls.add(makeBuiltinFunDecl(op));
		}
		return decls;
	}
}
