import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import lang.common.Report;

aspect NullDomain{
	/**
	 * Abstract domain for the four-element nullness lattice:
	 * - TOP represents "either NULL or NONNULL"
	 * - BOTTOM represents "no information yet"
	 */
	public enum Nullness implements Lattice<Nullness> {
		TOP("⊤"),
		BOTTOM("⊥"),
		NULL("NULL"),
		NOTNULL("NOTNULL")
		;
		private String name;
		private Nullness(String str) {
			this.name = str;
		}
		@Override
		public String
		toString() {
			return this.name;
		}

		/**
		 * @return <tt>true</tt> iff the concrete value <tt>null</tt> is allowed by this abstract value
		 */
		public boolean mayBeNull() {
			return NULL.isLessOrEqual(this);
		}

		/**
		 * @return <tt>true</tt> iff the concrete value for this abstract value MUST be <tt>null</tt>
		 */
		public boolean mustBeNull() {
			return this == NULL;
		}

		/**
		 * Join function for the domain
		 */
		public Nullness join(Nullness other) {
			if (this == BOTTOM) {
				return other;
			}
			if (other == BOTTOM) {
				return this;
			}
			if (this == other) {
				return this;
			}
			// this != other, neither is bottom
			return TOP;
		}

		/**
		 * Lattice order relation test
		 *
		 * @param other
		 * @return <tt>true</tt> iff this &lt;= other in lattice order
		 */
		public boolean isLessOrEqual(Nullness other) {
			if (other == TOP
			    || this == BOTTOM
			    || this == other) {
				return true;
			}
			return false;
		}
	}

	/**
	 * Product domain for Nullness.
	 */
	public class NullDomain extends VarDomain<Nullness, NullDomain> {
		public static Nullness TOP = Nullness.TOP;
		public static Nullness BOTTOM = Nullness.BOTTOM;
		public static Nullness NULL = Nullness.NULL;
		public static Nullness NOTNULL = Nullness.NOTNULL;

		/**
		 * Construct empty NullDomain
		 */
		public NullDomain() {
			this(null);
		};

		/**
		 * Construct NullDomain that is a copy of another NullDomain
		 */
		public NullDomain(NullDomain source) {
			super(Nullness.BOTTOM,
			      source);
		};

		// Create a new instance of NullDomain.
		// This method is a workaround to inherent limitations in subtyping.
		// Every implementation of VarDomain must provide this method.
		@Override
		protected NullDomain createFrom(NullDomain source) {
			return new NullDomain(source);
		}
	}
}

aspect NullPointerAnalysis{
	/**
	 * nullnessTransfer compute the nullness of the variables in the lattice
	 * after the execution of the current node.
	 * @param lattice the nullness of the variables before the execution of the current node.
	 * @return a lattice with the nullness of the variables after the execution of the current node.
	 */
	syn NullDomain CFGNode.nullnessTransfer(NullDomain lattice);
	eq Access.nullnessTransfer(NullDomain lattice)           =lattice;
	eq IntConstant.nullnessTransfer(NullDomain lattice)      =lattice;
	eq StringConstant.nullnessTransfer(NullDomain lattice)   =lattice;
	eq Null.nullnessTransfer(NullDomain lattice)             =lattice;
	eq CallExpr.nullnessTransfer(NullDomain lattice)         =lattice;
	eq NotExpr.nullnessTransfer(NullDomain lattice)          =lattice;
	eq ArrayLiteralExpr.nullnessTransfer(NullDomain lattice) =lattice;
	eq AddExpr.nullnessTransfer(NullDomain lattice)          =lattice;
	eq SubExpr.nullnessTransfer(NullDomain lattice)          =lattice;
	eq MulExpr.nullnessTransfer(NullDomain lattice)          =lattice;
	eq DivExpr.nullnessTransfer(NullDomain lattice)          =lattice;
	eq ModExpr.nullnessTransfer(NullDomain lattice)          =lattice;
	eq EQExpr.nullnessTransfer(NullDomain lattice)           =lattice;
	eq NEQExpr.nullnessTransfer(NullDomain lattice)          =lattice;
	eq LTExpr.nullnessTransfer(NullDomain lattice)           =lattice;
	eq GTExpr.nullnessTransfer(NullDomain lattice)           =lattice;
	eq LEQExpr.nullnessTransfer(NullDomain lattice)          =lattice;
	eq GEQExpr.nullnessTransfer(NullDomain lattice)          =lattice;
	eq NewExpr.nullnessTransfer(NullDomain lattice)          =lattice;
	eq TypedExpr.nullnessTransfer(NullDomain lattice)        =lattice;
	eq IndexExpr.nullnessTransfer(NullDomain lattice)        =lattice;
	eq OrExpr.nullnessTransfer(NullDomain lattice)           =lattice;
	eq AndExpr.nullnessTransfer(NullDomain lattice)          =lattice;
	eq ReturnStmt.nullnessTransfer(NullDomain lattice)       =lattice;

	eq Entry.nullnessTransfer(NullDomain lattice) {
		/* Important: don't modify "lattice"! */
		NullDomain result = new NullDomain(lattice);

		/* Map all function parameters to "top" */
		for (VarDecl formalParameter : declOwner().asFunDecl().getFormalList()) {
			result.put(formalParameter, formalParameter.defaultInitializerNullness());
		}
		return result;
	}

	eq Exit.nullnessTransfer(NullDomain lattice)             =lattice;

	eq AssignStmt.nullnessTransfer(NullDomain lattice) {
		/* Important: don't modify "lattice"! */
		NullDomain result = new NullDomain(lattice);
		VarDecl decl = getLValue().decl();
		result.put(decl, getRValue().nullnessValue());
		return result;
	}

	// --------------------------------------------------------------------------------
	// VarDecls below

	/**
	 * When encountering a VarDecl: what is the default value "Nullness" if there is no explicit initialiser?
	 */
	inh Nullness VarDecl.defaultInitializerNullness();
	eq Program.getChild().defaultInitializerNullness() = Nullness.NULL; // Default: initialised to NULL
	eq FunDecl.getFormal().defaultInitializerNullness() = Nullness.TOP; // Function parameter: Unknown

	eq VarDecl.nullnessTransfer(NullDomain lattice) {
		/* Important: don't modify "lattice"! */
		NullDomain result = new NullDomain(lattice);
		if (hasInitializer()) {
			result.put(this, getInitializer().nullnessValue());
		} else {
			result.put(this, defaultInitializerNullness());
		}
		return result;
	}

	// Control sensitive transfer (not used here):

	// eq ControlTrue.nullnessTransfer(NullDomain lattice) {
	// 	//We don't have to invert the lattice. We can directely use the implicit assignment.
	// 	if (getCond().isImplicitAssignment()) {
	// 		NullDomain result = new NullDomain(lattice);
	// 		NullDomain assignment = getCond().getImplicitAssignment();
	// 		for(VarDecl decl : assignment.keySet()){
	// 			result.put(decl, assignment.get(decl));
	// 		}
	// 		return result.join(getCond().getImplicitAssignment());
	// 	} else {
	// 		return lattice;
	// 	}
	// }
	// eq ControlFalse.nullnessTransfer(NullDomain lattice) {
	// 	if (getCond().isImplicitAssignment()) {
	// 		NullDomain result = new NullDomain(lattice);
	// 		//We must invert the implicit assignment
	// 		NullDomain assignment = getCond().getImplicitAssignment().invert();
	// 		for(VarDecl decl : assignment.keySet()){
	// 			result.put(decl, assignment.get(decl));
	// 		}
	// 		return result;
	// 	} else {
	// 		return lattice;
	// 	}
	// }

	/**
	 * nullnessOut computes the result of the application of the transfer function
	 * to the incoming environment (i.e., nullnessIn).
	 */
	syn NullDomain CFGNode.nullnessOut() circular[new NullDomain()] {
		NullDomain res = new NullDomain(nullnessIn());
		res = nullnessTransfer(res);
		return res;
	}

	/**
	 * nullnessIn computes the join between the incoming environment for the current node.
	 */
	syn NullDomain CFGNode.nullnessIn() circular[new NullDomain()] {
		NullDomain res = new NullDomain();
		for (CFGNode e : pred()) {
			res.joinUpdate(e.nullnessOut());
		}
		return res;
	}

}

aspect NullPointerAnalysisHelpers {
	coll LinkedHashSet<VarDecl> FunDecl.decls()[new LinkedHashSet<VarDecl>()] with add root FunDecl;
	VarDecl contributes this to FunDecl.decls();

	/**
	 * @return <tt>null</tt> if the expression is not a variable access, otherwise the <tt>VarDecl</tt>
	 *         at which this variable was declared.
	 */
	syn VarDecl Expr.decl() = null;
	eq Access.decl() = varDecl();
}

aspect NullnessValue {
	/**
	 * Computes the abstract value for an expression
	 */
	syn Nullness Expr.nullnessValue() = Nullness.NOTNULL;  // All literals are non-null
	eq CallExpr.nullnessValue() = Nullness.TOP;            // Calls may or may not return NULL
	eq Null.nullnessValue() = Nullness.NULL;
	eq Access.nullnessValue() = nullnessIn().get(decl());  // Variables' nullness may change as we compute fixpoints

	syn Nullness VarDecl.nullnessInitializerValue() = this.nullnessOut().get(this);
}


aspect NullPointerAnalysisControlSensitivity{

	syn boolean Expr.isImplicitAssignment() = getImplicitAssignment() != null;

	/**
	 * getImplicitAssignment: computes the implicit assignment of the expression.
	 * @return a lattice with a map from the variable to the abstract value represented
	 * by the implicit assignment.
	 */
	syn NullDomain Expr.getImplicitAssignment() = null;
	eq NEQExpr.getImplicitAssignment() {
		NullDomain result = new NullDomain();
		if (getLeft().decl() != null && getRight().nullnessValue().mustBeNull()) {
			result.put(getLeft().decl(), NullDomain.NOTNULL);
		} else if (getLeft().nullnessValue().mustBeNull() && getRight().decl() != null) {
			result.put(getRight().decl(), NullDomain.NOTNULL);
		}
		return result;
	}

	eq EQExpr.getImplicitAssignment() {
		NullDomain result = new NullDomain();
		if (getLeft().decl() != null && getRight().nullnessValue().mustBeNull()) {
			result.put(getLeft().decl() , NullDomain.NULL);
		} else if (getLeft().nullnessValue().mustBeNull() && getRight().decl() != null) {
			result.put(getRight().decl(), NullDomain.NULL);
		}
		return result;
	}
}
