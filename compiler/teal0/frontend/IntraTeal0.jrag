/**
 * Specialisation of IntraCFG to Teal-0
 */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.TreeSet;

import lang.attrcmp.NTAOwner;

// In Teal, we mainly use a subset of AST nodes to serve as CFG nodes.
// In other words, some (but not all) AST nodes are also CFG nodes.

// Coversely, almost all CFG nodes are AST nodes.  There are two exceptions:
// - `Entry` nodes (FunDecl.entry())
// - `Exit`  nodes (FunDecl.exit())
//
// These nodes are so-called "NTA" or "Non-Terminal Attribute" nodes;
// while they are ASTNode objects, they are not part of the input program
// and not part of the normal AST structure (e.g., not accessible via getChild()).
//
// You can (and may have to) write attribute equations for them, too,
// including data flow-related attribute equations.
// For the purposes of EDAP15, you can mostly treat them as any other CFG node.
//
// For example, when you inherit equations for them, you can use the
// FunDecl.entry() and FunDecl.exit() methods to reference them
// (cf. the definition of `FunDecl.entry().nextNodes()' below.), which is analogous
// to how you would define inherited attributes for AST nodes.

aspect IntraTeal {

	Stmt implements CFGSupport;
	TypedExpr implements CFGSupport;
	AndExpr implements CFGSupport;
	OrExpr implements CFGSupport;

	// All CFGNodes
	Expr implements CFGNode;
	Access implements CFGNode;
	VarDecl implements CFGNode;
	IntConstant implements CFGNode;
	StringConstant implements CFGNode;
	Null implements CFGNode;
	CallExpr implements CFGNode;
	NotExpr implements CFGNode;
	ArrayLiteralExpr implements CFGNode;
	// We want this only to support the case
	// when [] is used as an expression

	IndexExpr implements CFGNode;
	AddExpr implements CFGNode;
	SubExpr implements CFGNode;
	MulExpr implements CFGNode;
	DivExpr implements CFGNode;
	ModExpr implements CFGNode;
	EQExpr implements CFGNode;
	NEQExpr implements CFGNode;
	LTExpr implements CFGNode;
	GTExpr implements CFGNode;
	LEQExpr implements CFGNode;
	GEQExpr implements CFGNode;
	NewExpr implements CFGNode;
	AssignStmt implements CFGNode;
	ReturnStmt implements CFGNode;

	// All CFGRoots
	FunDecl implements CFGRoot;

	eq FunDecl.entry().nextNodes() =
		hasBody() ? getBody().firstNodes() : SmallSet.<CFGNode>singleton(exit());
	eq FunDecl.getBody().nextNodes() = SmallSet.<CFGNode>singleton(exit());

	eq BlockStmt.firstNodes() =
		(getNumStmt() == 0) ? nextNodes() : getStmt(0).firstNodes();
	eq BlockStmt.getStmt(int i).nextNodes() {
		if (i == getNumStmt() - 1) {
			return nextNodes();
		} else {
			return getStmt(i + 1).firstNodes();
		}
	}

	eq VarDeclStmt.firstNodes() = getVarDecl().firstNodes();
	eq VarDecl.firstNodes() = hasInitializer()
		? getInitializer().firstNodes()
		: SmallSet.<CFGNode>singleton(this);
	eq VarDecl.getInitializer().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq ExprStmt.firstNodes() = getExpr().firstNodes();

	eq IfStmt.firstNodes() = getCond().firstNodes();
	// See IntraTeal0WithCS / IntraTeal0WithoutCS for the "IfStmt.*.nextNodes()" equations

	eq WhileStmt.firstNodes() = getCond().firstNodes();
	// See IntraTeal0WithCS / IntraTeal0WithoutCS for the "WhileStmt.*.nextNodes()" equations

	eq ReturnStmt.firstNodes() = getExpr().firstNodes();
	eq ReturnStmt.getExpr().nextNodes() = SmallSet.<CFGNode>singleton(this);
	eq ReturnStmt.succ() = SmallSet.<CFGNode>singleton(exit());

	// The flow for AssignStmt is: right -> left -> this -> next
	eq AssignStmt.firstNodes() = getRValue().firstNodes();
	eq AssignStmt.getRValue().nextNodes() = getLValue().firstNodes();
	eq AssignStmt.getLValue().nextNodes() = SmallSet.<CFGNode>singleton(this);
	eq AssignStmt.succ() = nextNodes();

	eq Access.firstNodes() = SmallSet.<CFGNode>singleton(this);

	eq IntConstant.firstNodes() = SmallSet.<CFGNode>singleton(this);

	eq StringConstant.firstNodes() = SmallSet.<CFGNode>singleton(this);

	eq Null.firstNodes() = SmallSet.<CFGNode>singleton(this);

	eq CallExpr.firstNodes() = (getNumActual() == 0)
		? SmallSet.<CFGNode>singleton(this)
		: getActual(0).firstNodes();
	eq CallExpr.getActual(int i).nextNodes() {
		if (i == getNumActual() - 1) {
			return SmallSet.<CFGNode>singleton(this);
		} else {
			return getActual(i + 1).firstNodes();
		}
	}
	eq ArrayLiteralExpr.firstNodes() = (getNumExpr() == 0)
		? SmallSet.<CFGNode>singleton(this)
		: getExpr(0).firstNodes();
	eq ArrayLiteralExpr.getExpr(int i).nextNodes() {
		if (i == getNumExpr() - 1) {
			return SmallSet.<CFGNode>singleton(this);
		} else {
			return getExpr(i + 1).firstNodes();
		}
	}


	eq IndexExpr.firstNodes() = getBase().firstNodes();
	eq IndexExpr.getBase().nextNodes() = getIndex().firstNodes();
	eq IndexExpr.getIndex().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq NotExpr.firstNodes() = getExpr().firstNodes();
	eq NotExpr.getExpr().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq AddExpr.firstNodes() = getLeft().firstNodes();
	eq AddExpr.getLeft().nextNodes() = getRight().firstNodes();
	eq AddExpr.getRight().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq SubExpr.firstNodes() = getLeft().firstNodes();
	eq SubExpr.getLeft().nextNodes() = getRight().firstNodes();
	eq SubExpr.getRight().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq MulExpr.firstNodes() = getLeft().firstNodes();
	eq MulExpr.getLeft().nextNodes() = getRight().firstNodes();
	eq MulExpr.getRight().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq DivExpr.firstNodes() = getLeft().firstNodes();
	eq DivExpr.getLeft().nextNodes() = getRight().firstNodes();
	eq DivExpr.getRight().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq ModExpr.firstNodes() = getLeft().firstNodes();
	eq ModExpr.getLeft().nextNodes() = getRight().firstNodes();
	eq ModExpr.getRight().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq EQExpr.firstNodes() = getLeft().firstNodes();
	eq EQExpr.getLeft().nextNodes() = getRight().firstNodes();
	eq EQExpr.getRight().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq NEQExpr.firstNodes() = getLeft().firstNodes();
	eq NEQExpr.getLeft().nextNodes() = getRight().firstNodes();
	eq NEQExpr.getRight().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq LTExpr.firstNodes() = getLeft().firstNodes();
	eq LTExpr.getLeft().nextNodes() = getRight().firstNodes();
	eq LTExpr.getRight().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq GTExpr.firstNodes() = getLeft().firstNodes();
	eq GTExpr.getLeft().nextNodes() = getRight().firstNodes();
	eq GTExpr.getRight().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq LEQExpr.firstNodes() = getLeft().firstNodes();
	eq LEQExpr.getLeft().nextNodes() = getRight().firstNodes();
	eq LEQExpr.getRight().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq GEQExpr.firstNodes() = getLeft().firstNodes();
	eq GEQExpr.getLeft().nextNodes() = getRight().firstNodes();
	eq GEQExpr.getRight().nextNodes() = SmallSet.<CFGNode>singleton(this);

	eq AndExpr.firstNodes() = getLeft().firstNodes();
	eq OrExpr.firstNodes() = getLeft().firstNodes();

	// The disabled code below is for short-cicruit evaluation, which we don't use in Teal at this point
	// ----------------------------------------
	// // And

	// eq AndExpr.getRight().nextNodes() {
	//     return getRight().nextNodesTT()
	// 	.union(getRight().nextNodesFF());
	// }

	// eq AndExpr.getLeft().nextNodes() {
	//     return getLeft().nextNodesTT()
	// 	.union(getLeft().nextNodesFF());
	// }

	// eq AndExpr.succ() = this.inControlSensitiveContext()
	//     ? SmallSet.<CFGNode>empty() : this.nextNodes();

	// // ----------------------------------------
	// // Or

	// eq OrExpr.getLeft().nextNodes() {
	//     return getLeft().nextNodesTT()
	// 	.union(getLeft().nextNodesFF());
	// }
	// eq OrExpr.getRight().nextNodes() {
	//     return getRight().nextNodesTT()
	// 	.union(getRight().nextNodesFF());
	// }

	// eq OrExpr.succ() = this.inControlSensitiveContext()
	//     ? SmallSet.<CFGNode>empty() : this.nextNodes();

	// ----------------------------------------
	eq NewExpr.firstNodes() {
		if (getNumActual() == 0) {
			return SmallSet.<CFGNode>singleton(this);
		} else {
			return getActual(0).firstNodes();
		}
	}

	eq NewExpr.getActual(int i).nextNodes() {
		if (i == getNumActual() - 1) {
			return SmallSet.<CFGNode>singleton(this);
		} else {
			return getActual(i + 1).firstNodes();
		}
	}

	eq TypedExpr.firstNodes() = getExpr().firstNodes();

	// Disabled, using workaround due to bug in JastAdd + collections on interfaces + ASTNode
	// FunDecl contributes nta entry() to CFGNode.predColl();
	// FunDecl contributes nta exit() to CFGNode.predColl();

}

aspect WarningSuppression {
	// Suppress warnings (better to throw an exception)
	eq Program.getChild().entry() = null;
	eq Program.getChild().exit() = null;
	eq Program.getChild().nextNodes() = SmallSet.<CFGNode>empty();
	eq Program.getChild().nextNodesTT() = SmallSet.<CFGNode>empty();
	eq Program.getChild().nextNodesFF() = SmallSet.<CFGNode>empty();

	// Default equations for CFGNodes
	eq Entry.succ()=nextNodes();
	eq Exit.succ()=nextNodes();
	eq Access.succ()=nextNodes();
	eq VarDecl.succ()=nextNodes();
	eq IntConstant.succ()=nextNodes();
	eq StringConstant.succ()=nextNodes();
	eq Null.succ()=nextNodes();
	eq CallExpr.succ()=nextNodes();
	eq NotExpr.succ()=nextNodes();
	eq ArrayLiteralExpr.succ() = nextNodes();
	eq AddExpr.succ()=nextNodes();
	eq SubExpr.succ()=nextNodes();
	eq MulExpr.succ()=nextNodes();
	eq DivExpr.succ()=nextNodes();
	eq ModExpr.succ()=nextNodes();
	eq EQExpr.succ()=nextNodes();
	eq NEQExpr.succ()=nextNodes();
	eq LTExpr.succ()=nextNodes();
	eq GTExpr.succ()=nextNodes();
	eq LEQExpr.succ()=nextNodes();
	eq GEQExpr.succ()=nextNodes();
	eq NewExpr.succ()=nextNodes();
	eq TypedExpr.succ()=nextNodes();
	eq IndexExpr.succ()=nextNodes();

	// And and Or work like other binary operators, since we don't use short-circuit evaluation at the moment:
	eq AndExpr.succ()=nextNodes();
	eq OrExpr.succ()=nextNodes();
}

aspect AllCFGNodes {
	coll ArrayList<CFGNode> Program.allCFGNodes() [new ArrayList<CFGNode>()] with add;

	ASTNode contributes ((CFGNode)this)
		when this instanceof CFGNode
		to Program.allCFGNodes();

	// Track NTAs for Entry and Exit
	FunDecl contributes exit() to Program.allCFGNodes();
	FunDecl contributes entry() to Program.allCFGNodes();
}

/**
 * This is mostly to help debug/visualise the CFG.
 */
aspect IntraTealEdges {
	coll ArrayList<Report.FlowEdge> Program.allForwardFlowEdgesUnsorted()
		[new ArrayList<Report.FlowEdge>()] with add;

	coll ArrayList<Report.FlowEdge> Program.allBackwardFlowEdgesUnsorted()
		[new ArrayList<Report.FlowEdge>()] with add;


	syn java.util.List<Report.FlowEdge> Program.allForwardFlowEdges() =
		Program.sortedEdges(Entry.class, this.allForwardFlowEdgesUnsorted());

	syn java.util.List<Report.FlowEdge> Program.allBackwardFlowEdges() =
		Program.sortedEdges(Exit.class, this.allBackwardFlowEdgesUnsorted());

	/**
	 * Sort edges to group common "start" edges, put in tree order
	 *
	 * @param startType CFG Node type to use as starting point (normally Entry.class or Exit.class)
	 * @param edges The edges to sort
	 * @return Sorted edges
	 */
	public static ArrayList<Report.FlowEdge> Program.sortedEdges(Class<?> startType,
								     java.util.List<? extends Report.FlowEdge> edges) {
		// Track all edges and how often they're listed (should always be 1)
		HashMap<Report.FlowEdge, Integer> workMultiSet = new HashMap<Report.FlowEdge, Integer>();
		// Outgoing edges (using only the array of edges as ground truth)
		HashMap<Object, ArrayList<Report.FlowEdge>> outgoing = new HashMap<Object, ArrayList<Report.FlowEdge>>();
		// (Sorted) starting points
		TreeSet<WithSourceLocation> startingPoints = new TreeSet<>(new WithSourceLocation.Comparator());

		// Initialise the above three datastructures
		for (Report.FlowEdge edge : edges) {
			if (!workMultiSet.containsKey(edge)) {
				workMultiSet.put(edge, 0);
			}
			// We shouldn't have duplicate edges, but we want to include them more than once them if we do
			workMultiSet.put(edge,
					 1 + workMultiSet.get(edge));

			WithSourceLocation src = edge.getFrom();
			if (outgoing.get(src) == null) {
				outgoing.put(src, new ArrayList<>());
			}
			outgoing.get(src).add(edge);
			if (startType.isInstance(src)) {
				startingPoints.add(src);
			}
		}

		// Add edges in order
		ArrayList<Report.FlowEdge> result = new ArrayList<>();
		for (WithSourceLocation entry : startingPoints) {
			HashSet<Object> completed = new HashSet<>();
			PriorityQueue<WithSourceLocation> worklist = new PriorityQueue<WithSourceLocation>(new WithSourceLocation.Comparator());
			worklist.add(entry);

			while (!worklist.isEmpty()) {
				Object src = worklist.remove();
				completed.add(src);

				ArrayList<Report.FlowEdge> localEdges = outgoing.get(src);
				if (localEdges != null) {
					Collections.sort(localEdges, new java.util.Comparator<Report.FlowEdge>() {
						public int compare(Report.FlowEdge e1, Report.FlowEdge e2) {
							return e1.getTo().sourceLocation().compareTo(e2.getTo().sourceLocation());
						}
					});
					for (Report.FlowEdge edge : localEdges) {
						result.add(edge);
						workMultiSet.put(edge, workMultiSet.get(edge) - 1);
						WithSourceLocation dest = edge.getTo();
						if (!completed.contains(dest) && !worklist.contains(dest)) {
							worklist.add(dest);
						}
					}
				}
			}
		}

		// We should have all edges now, unless there was some error
		for (Map.Entry<Report.FlowEdge, Integer> item : workMultiSet.entrySet()) {
			for (int i = 0; i < item.getValue(); ++i) {
				result.add(item.getKey());
			}
		}

		return result;
	}

	/** Colouring scheme for AST node edges: if true, randomises colours */
	static final boolean ASTNode.INTRA_TEAL_RANDOM_EDGE_COLORS = true;
	// FIXME: better to generalie with a colouring scheme interface

	/**
	 * @param fwd: Forward edge (IN edge, from a CFG perspective) or not (OUT edge)
	 * @param from: Edge source CFG node
	 * @param toward: Edge destination CFG node
	 */
	public static String ASTNode.edgeColor(boolean fwd, CFGNode from, CFGNode toward) {
		ASTNode ast_from = (ASTNode) from;
		ASTNode ast_toward = (ASTNode) toward;
		boolean syntacticForward = ast_from.sourceLocation().compareTo(ast_toward.sourceLocation()) < 0;

		final int alpha = 0x8;
		int red = 0;
		int green = 0;
		int blue = 0;

		if (ASTNode.INTRA_TEAL_RANDOM_EDGE_COLORS) {
			// Randomised colours
			Random random = new Random(ast_from.getStartLoc() ^ ast_toward.getStartLoc());

			if (syntacticForward != fwd) {
				// back-edge, in the sense of going the opposite of the "normal" direction
				// less common, need less entropy
				red = 8 + random.nextInt(8);
				blue = red - random.nextInt(4);
				green = random.nextInt(8);
			} else {
				if (random.nextBoolean()) {
					// blue-style
					blue = 12 + random.nextInt(4);
					green = random.nextInt(16);
				} else {
					// green-style
					green = 8 + random.nextInt(8);
					blue = random.nextInt(16);
				}
				red = random.nextInt(green+1);
			}
		} else {
			// Different colours for forward and backward edges
			if (fwd) {
				// forward edge
				boolean toTrue = from instanceof ControlTrueNode;
				boolean toFalse = from instanceof ControlFalseNode;

				blue = 15;

				if (toTrue) {
					green = 12;
				}
				if (toFalse) {
					red = 12;
				}
				if (!syntacticForward) {
					red += 3;
				}
			} else {
				// backward edge
				boolean toTrue = toward instanceof ControlTrueNode;
				boolean toFalse = toward instanceof ControlFalseNode;

				red = green = 7;
				if (toTrue) {
					green = 15;
				}
				if (toFalse) {
					red = 15;
				}
			}
		}

		// More homogenous colouring scheme, perhaps less useful:

		final String s = String.format("#%01x%01x%01x%01x",
				     red,
				     green,
				     blue,
				     alpha);
		return s;
	}


	syn Collection<Report.FlowEdge> CFGNode.forwardFlowEdges() {
		return this.succ()
			.stream()
			.map((next)->Report.FlowEdge.arrow(
				     this, (ASTNode)next,
				     ASTNode.edgeColor(true, this, next)))
			.collect(java.util.stream.Collectors.toList());
	}

	syn Collection<Report.FlowEdge> CFGNode.backwardFlowEdges() {
		return this.pred()
			.stream()
			.map((prev)->Report.FlowEdge.arrow(
				     (ASTNode)this, (ASTNode)prev,
				     ASTNode.edgeColor(false, this, prev)))
			.collect(java.util.stream.Collectors.toList());
	}

	ASTNode contributes each ((CFGNode)this).forwardFlowEdges() when isCFGNode() to Program.allForwardFlowEdgesUnsorted();
	ASTNode contributes each((CFGNode)this).backwardFlowEdges() when isCFGNode() to Program.allBackwardFlowEdgesUnsorted();

	FunDecl contributes nta exit()
		to Program.allForwardFlowEdgesUnsorted(); // Superfluous but harmless
	FunDecl contributes nta exit()
		to Program.allBackwardFlowEdgesUnsorted();

	FunDecl contributes nta entry()
		to Program.allForwardFlowEdgesUnsorted();
	FunDecl contributes nta entry()
		to Program.allBackwardFlowEdgesUnsorted(); // Superfluous but harmless

}
