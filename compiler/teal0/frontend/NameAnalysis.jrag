import java.util.HashMap;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Collection;
import java.util.Set;

aspect NameAnalysis {
	/**
	 * Get the function or variable name
	 */
        syn String Decl.name() {
                return getIdDecl().getIdentifier();
        }

        syn String CallExpr.name() {
                return getIdUse().getIdentifier();
        }

        syn String Access.name() {
                return getIdUse().getIdentifier();
        }

	/**
	 * Get function declaration for CallExpr and BinExpr
	 */
	interface FunCall {
		/**
		 * Get the FunDecl, i.e., the declaration of the called funcion, for this call
		 */
		FunDecl funDecl();
	}

	class CallExpr implements FunCall {
		public FunDecl funDecl() {
			return getIdUse().lookup().getDecl().asFunDecl();
		}
	}

	class BinExpr implements FunCall {
		public FunDecl funDecl() {
			return lookup(builtin().getName()).getDecl().asFunDecl();
		}
	}

	/**
	 * Get the VarDecl, i.e., the declaration of the variable, for a variable access
	 */
	syn VarDecl Access.varDecl() {
		return getIdUse().lookup().getDecl().asVarDecl();
	}

	/**
	 * Check if a declaration is for a built-in operation
	 */
	syn boolean Decl.isBuiltin() = false;
	eq FunDecl.isBuiltin() = !hasBody();

	// ----------------------------------------
	// Implementation details below.

        // Lookup the declaration matching an use.
	inh IdDecl IdUse.lookup(String s);
	syn IdDecl IdUse.lookup() = lookup(getIdentifier());

	inh IdDecl Stmt.lookup(String s);

	eq BlockStmt.getStmt(int i).lookup(String s) {
		IndexedDecl d = localLookup(s);
		if (d != null && d.index < i) {
			return d.decl;
		}
		return lookup(s);
	}

	eq IfStmt.getThen().lookup(String s) {
		return lookup(s);
	}

	eq IfStmt.getElse().lookup(String s) {
		return lookup(s);
	}

	eq WhileStmt.getBody().lookup(String s) {
		return lookup(s);
	}

	eq FunDecl.getBody().lookup(String s) {
		IdDecl d = localLookup(s);
		if (d != null) {
			return d;
		}
		return lookup(s);
	}

	eq Program.getChild().lookup(String s) {
	    return null;
	}

	// inh IdDecl TypeDecl.lookup(String s);
	syn IdDecl Module.localLookup(String s) {
		IdDecl d = moduleDeclMap().getOne(s);
		if (d != null) {
			return d;
		}
		return lookup(s);
	}

	eq Module.getDecl().lookup(String s) {
		IdDecl d = moduleDeclMap().getOne(s);
		if (d != null) {
			return d;
		}
		return lookup(s);
	}
	inh IdDecl FunDecl.lookup(String s);
	inh IdDecl Module.lookup(String s);

	inh IdDecl Expr.lookup(String s);
	eq ExprStmt.getExpr().lookup(String s) = lookup(s);
	eq AssignStmt.getLValue().lookup(String s)  = lookup(s);
	eq ReturnStmt.getExpr().lookup(String s) = lookup(s);

	eq Program.getModule().lookup(String s) {
		IdDecl d = localLookup(s);
		if (d != null) {
			return d;
		}
		return toplevelLookup(s);
	}


	eq Program.getBuiltinDecls().lookup(String s) {
		IdDecl d = localLookup(s);
		if (d != null) {
			return d;
		}
		return toplevelLookup(s);
	}

	syn IdDecl Program.localLookup(String s) {
		IdDecl d = globalDeclMap().getOne(s);
		if (d != null) {
			return d;
		}
		return unknownDecl();
	}

	syn IdDecl Program.toplevelLookup(String s) {
		return localLookup(s);
	}

	inh Decl IdDecl.getDecl();
	eq FunDecl.getIdDecl().getDecl() = this;
	eq VarDecl.getIdDecl().getDecl() = this;
	eq Program.unknownDecl().getDecl() = null;
}

// Implementation details
aspect NameAnalysisPrivate {
	syn nta UnknownDecl Program.unknownDecl() = new UnknownDecl("UnknownDecl");
	syn boolean IdDecl.isUnknown() = false;
	eq UnknownDecl.isUnknown() = true;

	syn IdDecl Stmt.declaredVar() = null;

	eq VarDeclStmt.declaredVar() = getVarDecl().getIdDecl();

	class IndexedDecl {
		int index;
		IdDecl decl;
		IndexedDecl(int index, IdDecl decl) {
			this.index = index;
			this.decl = decl;
		}
	}

	syn MultiHashMap<String, IndexedDecl> BlockStmt.localDeclMap() {
		MultiHashMap<String, IndexedDecl> declMap = new MultiHashMap<>();
		for (int i = 0; i < getNumStmt(); i++) {
			Stmt s = getStmt(i);
			IdDecl decl = s.declaredVar();
			if (decl != null) {
				declMap.append(decl.getIdentifier(), new IndexedDecl(i, decl));
			}
		}
		return declMap;
	}

	syn IndexedDecl BlockStmt.localLookup(String s) {
		IndexedDecl d = localDeclMap().getOne(s);
		if (d != null) {
			return d;
		}
		return null;
	}

	syn MultiHashMap<String, IdDecl> Decl.localDeclMap() = new MultiHashMap<>();

	eq FunDecl.localDeclMap() {
		MultiHashMap<String, IdDecl> declMap = new MultiHashMap<>();
		for (VarDecl d : getFormals())
			declMap.append(d.name(), d.getIdDecl());
		return declMap;
	}

	syn IdDecl FunDecl.localLookup(String s) {
		IdDecl d = localDeclMap().getOne(s);
		return d;
	}

	syn IdDecl Decl.getIdDecl() = null;
	// all subclases of Decl have an IdDecl child node, so we get
	// the definitions for getIdDecl for free

	/**
	   function names and global variable declarations share a single namespace.
	   [TEAL-2+]: So do type declarations and qualifier declarations.
	 **/
	syn MultiHashMap<String, IdDecl> Module.moduleDeclMap() {
		MultiHashMap<String, IdDecl> declMap = new MultiHashMap<>();

		for (ImportDecl i : getImportDecls()) {
			declMap.append(i.getDecl().name(), i.getDecl().getIdDecl());
		}

		for (Decl d : getDecls()) {
			declMap.append(d.name(), d.getIdDecl());
		}
		return declMap;
	}

	syn MultiHashMap<String, IdDecl> Program.globalDeclMap() {
		MultiHashMap<String, IdDecl> declMap = new MultiHashMap<>();
		for (Decl d : getBuiltinDeclsList()) {
			declMap.append(d.name(), d.getIdDecl());
		}
		return declMap;
	}
}

aspect NameAnalysisCheck {
	// Check for duplicate symbols
	class DuplicateSymbolDeclaration extends CompilerError {

		DuplicateSymbolDeclaration(Collection<IdDecl> declarations) {
			super("name-dup",
			      reportString(declarations),
			      sortedDecls(declarations).get(0));
		}

		public static java.util.List<IdDecl>
		sortedDecls(Collection<IdDecl> declarations) {
			java.util.List<IdDecl> decls = new ArrayList<>(declarations);
			Collections.sort(decls, Comparator.comparing(d -> d.sourceLocation()));
			return decls;
		}

		public static String reportString(Collection<IdDecl> declarations) {
			java.util.List<IdDecl> decls = sortedDecls(declarations);
			String name = decls.iterator().next().getIdentifier();
			String err = "Multiple declarations for symbol '" + name + "' at locations: ";
			for (int i = 0; i < decls.size(); i++) {
				IdDecl d = decls.get(i);
				if (i != 0) {
					err += ", ";
				}
				err += d.sourceLocation().toString();
			}
			return err;
		}
	}

	coll ArrayList<CompilerError> Program.nameErrors() [new ArrayList<CompilerError>()] with addAll;
	Decl contributes duplicateNameErrors() to Program.nameErrors();
	Module contributes duplicateNameErrors() to Program.nameErrors();
	BlockStmt contributes duplicateNameErrors() to Program.nameErrors();

	syn ArrayList<CompilerError> Decl.duplicateNameErrors() {
		ArrayList<CompilerError> errors = new ArrayList<>();
		for (Map.Entry<String, ? extends Collection<IdDecl>> entry : localDeclMap().entrySet()) {
			if (entry.getValue().size() > 1) {
				errors.add(new DuplicateSymbolDeclaration(entry.getValue()));
			}
		}
		return errors;
	}

	syn ArrayList<CompilerError> Module.duplicateNameErrors() {
		ArrayList<CompilerError> errors = new ArrayList<>();
		for (Map.Entry<String, ? extends Collection<IdDecl>> entry : moduleDeclMap().entrySet()) {
			if (entry.getValue().size() > 1) {
				errors.add(new DuplicateSymbolDeclaration(entry.getValue()));
			}
		}
		return errors;
	}

	syn ArrayList<CompilerError> BlockStmt.duplicateNameErrors() {
		ArrayList<CompilerError> errors = new ArrayList<>();
		for (Map.Entry<String, ? extends Collection<IndexedDecl>> entry : localDeclMap().entrySet()) {
			if (entry.getValue().size() > 1) {
				ArrayList<IdDecl> duplicateNames = new ArrayList<>();
				for (IndexedDecl d : entry.getValue())
					duplicateNames.add(d.decl);
				errors.add(new DuplicateSymbolDeclaration(duplicateNames));
			}
		}
		return errors;
	}

	// Check for undeclared symbols
	class UndeclaredSymbol extends CompilerError {

		UndeclaredSymbol(String name, ASTNode node) {
			super("name-undef",
			      "Undeclared symbol '" + name + "'",
			      node);
		}
	}

	IdUse contributes Collections.singleton(new UndeclaredSymbol(getIdentifier(), this))
		when lookup().isUnknown() to Program.nameErrors();
}

aspect NameAnalysisTest {
	/**
	   A map from identifier uses to declarations; used only for testing
	 **/
	coll AccHashMap<IdUse, IdDecl> Program.globalSymbolTable() [new AccHashMap<IdUse, IdDecl>()] with add;
	IdUse contributes new AbstractMap.SimpleEntry<IdUse, IdDecl>(this, lookup(getIdentifier())) to Program.globalSymbolTable();
}
