/**
 * Specialisation of IntraCFG to Teal-0: Control Sensitive variant
 */
import lang.attrcmp.NTAOwner;
import java.util.Arrays;

aspect IntraCFG {
    ControlTrue implements ControlTrueNode;
    ControlFalse implements ControlFalseNode;
}

aspect IntraTeal {
	eq IfStmt.getThen().nextNodes() = nextNodes();
	eq IfStmt.getElse().nextNodes() = nextNodes();
	eq IfStmt.getCond().nextNodes() {
	    return getCond().nextNodesTT()
		.union(getCond().nextNodesFF());
	}

	eq WhileStmt.getBody().nextNodes() = getCond().firstNodes();
	eq WhileStmt.getCond().nextNodes() {
	    return getCond().nextNodesTT()
		.union(getCond().nextNodesFF());
	}
}

// EITHER ControlSensitive OR ControlInsensitive should be active at any given time
aspect IntraTealControlSensitive {
	// Control node simplification: mark ControlFlowExpr nodes
	syn boolean Expr.isControlFlowExpr() = false;

	inh boolean ASTNode.inControlSensitiveContext();
	eq Program.getChild(int i).inControlSensitiveContext() = false;
	eq Expr.getChild(int i).inControlSensitiveContext() = isControlFlowExpr();
	eq Stmt.getChild(int i).inControlSensitiveContext() = false;
	eq IfStmt.getCond().inControlSensitiveContext() = true;
	eq WhileStmt.getCond().inControlSensitiveContext() = true;

	// ControlTrue and ControlFalse nodes mark when we have decided that their associated condition
	// is "true" or "false" (respectively).
	ControlTrue  implements CFGNode;
	ControlFalse implements CFGNode;

	eq ControlTrue.firstNodes()  = SmallSet.<CFGNode>singleton(this);
	eq ControlFalse.firstNodes() = SmallSet.<CFGNode>singleton(this);

	eq ControlTrue.succ()  = this.nextNodes();
	eq ControlFalse.succ() = this.nextNodes();

	// ----------------------------------------
	// Control nodes for IfStmt

	syn nta ControlTrue  IfStmt.controlTrue()  = new ControlTrue(this.getCond());
	syn nta ControlFalse IfStmt.controlFalse() = new ControlFalse(this.getCond());

	// Disabled, using workaround due to bug in JastAdd + collections on interfaces + ASTNode
	// IfStmt contributes nta controlTrue() to CFGNode.predColl();
	// IfStmt contributes nta controlFalse() to CFGNode.predColl();

	syn SmallSet<CFGNode> IfStmt.trueBranchTarget() = getThen().firstNodes();
	syn SmallSet<CFGNode> IfStmt.falseBranchTarget() = hasElse() ? getElse().firstNodes() : nextNodes();

	eq IfStmt.controlTrue().nextNodes()  = this.getCond().isControlFlowExpr()
		? SmallSet.<CFGNode>empty() : this.trueBranchTarget();
	eq IfStmt.controlFalse().nextNodes() = this.getCond().isControlFlowExpr()
		? SmallSet.<CFGNode>empty() : this.falseBranchTarget();

	eq IfStmt.getCond().nextNodesTT() = this.getCond().isControlFlowExpr()
		? this.trueBranchTarget() : SmallSet.<CFGNode>singleton(controlTrue());
	eq IfStmt.getCond().nextNodesFF() = this.getCond().isControlFlowExpr()
		? this.falseBranchTarget() : SmallSet.<CFGNode>singleton(controlFalse());

	// ----------------------------------------
	// Control nodes for WhileStmt
	// -- FIXME --: analogous to the changes to IfStmt

	syn nta ControlTrue  WhileStmt.controlTrue()  = new ControlTrue(this.getCond());
	syn nta ControlFalse WhileStmt.controlFalse() = new ControlFalse(this.getCond());

	// Disabled, using workaround due to bug in JastAdd + collections on interfaces + ASTNode
	// WhileStmt contributes nta controlTrue() to CFGNode.predColl();
	// WhileStmt contributes nta controlFalse() to CFGNode.predColl();

	syn SmallSet<CFGNode> WhileStmt.trueBranchTarget() = getBody().firstNodes();
	syn SmallSet<CFGNode> WhileStmt.falseBranchTarget() = nextNodes();

	eq WhileStmt.controlTrue().nextNodes()  = this.getCond().isControlFlowExpr()
		? SmallSet.<CFGNode>empty() : this.trueBranchTarget();
	eq WhileStmt.controlFalse().nextNodes() = this.getCond().isControlFlowExpr()
		? SmallSet.<CFGNode>empty() : this.falseBranchTarget();

	eq WhileStmt.getCond().nextNodesTT() = this.getCond().isControlFlowExpr()
		? this.trueBranchTarget() : SmallSet.<CFGNode>singleton(controlTrue());
	eq WhileStmt.getCond().nextNodesFF() = this.getCond().isControlFlowExpr()
		? this.falseBranchTarget() : SmallSet.<CFGNode>singleton(controlFalse());
}



aspect AllCFGNodes {
	// Control nodes
	IfStmt contributes nta controlTrue()  to Program.allCFGNodes();
	IfStmt contributes nta controlFalse() to Program.allCFGNodes();
	WhileStmt contributes nta controlTrue()  to Program.allCFGNodes();
	WhileStmt contributes nta controlFalse() to Program.allCFGNodes();

	// ----------------------------------------
	// The disabled code below is for short-cicruit evaluation, which we don't use in Teal at this point
}

aspect IntraTealEdges {
	// Control nodes
	IfStmt contributes nta controlTrue()  to Program.allForwardFlowEdgesUnsorted();
	IfStmt contributes nta controlFalse() to Program.allForwardFlowEdgesUnsorted();
	WhileStmt contributes nta controlTrue()  to Program.allForwardFlowEdgesUnsorted();
	WhileStmt contributes nta controlFalse() to Program.allForwardFlowEdgesUnsorted();

	IfStmt contributes nta controlTrue()  to Program.allBackwardFlowEdgesUnsorted();
	IfStmt contributes nta controlFalse() to Program.allBackwardFlowEdgesUnsorted();
	WhileStmt contributes nta controlTrue()  to Program.allBackwardFlowEdgesUnsorted();
	WhileStmt contributes nta controlFalse() to Program.allBackwardFlowEdgesUnsorted();

}


aspect NTAOwners {
	// Needs to be repetitive for now due to interface handling bugs in JastAdd
	IfStmt implements NTAOwner;
	public java.util.List<ASTNode> IfStmt.getNTAs() {
		return Arrays.<ASTNode>asList(this.controlTrue(),
					      this.controlFalse());
	}

	WhileStmt implements NTAOwner;
	public java.util.List<ASTNode> WhileStmt.getNTAs() {
		return Arrays.<ASTNode>asList(this.controlTrue(),
					      this.controlFalse());
	}
}

// ================================================================================
// The disabled code below is for short-cicruit evaluation, which we don't use in Teal at this point
// ================================================================================

// aspect IntraTealEdges {
// 	AndExpr contributes nta controlTrueRight()  to Program.allForwardFlowEdgesUnsorted();
// 	AndExpr contributes nta controlFalseRight() to Program.allForwardFlowEdgesUnsorted();
// 	AndExpr contributes nta controlTrueLeft()  to Program.allForwardFlowEdgesUnsorted();
// 	AndExpr contributes nta controlFalseLeft() to Program.allForwardFlowEdgesUnsorted();
// 	OrExpr contributes nta controlTrueRight()  to Program.allForwardFlowEdgesUnsorted();
// 	OrExpr contributes nta controlFalseRight() to Program.allForwardFlowEdgesUnsorted();
// 	OrExpr contributes nta controlTrueLeft()  to Program.allForwardFlowEdgesUnsorted();
// 	OrExpr contributes nta controlFalseLeft() to Program.allForwardFlowEdgesUnsorted();

// 	AndExpr contributes nta controlTrueRight()  to Program.allBackwardFlowEdgesUnsorted();
// 	AndExpr contributes nta controlFalseRight() to Program.allBackwardFlowEdgesUnsorted();
// 	AndExpr contributes nta controlTrueLeft()  to Program.allBackwardFlowEdgesUnsorted();
// 	AndExpr contributes nta controlFalseLeft() to Program.allBackwardFlowEdgesUnsorted();
// 	OrExpr contributes nta controlTrueRight()  to Program.allBackwardFlowEdgesUnsorted();
// 	OrExpr contributes nta controlFalseRight() to Program.allBackwardFlowEdgesUnsorted();
// 	OrExpr contributes nta controlTrueLeft()  to Program.allBackwardFlowEdgesUnsorted();
// 	OrExpr contributes nta controlFalseLeft() to Program.allBackwardFlowEdgesUnsorted();
// }

// aspect AllCFGNodes {
// 	AndExpr contributes nta controlTrueLeft()  to Program.allCFGNodes();
// 	AndExpr contributes nta controlFalseLeft() to Program.allCFGNodes();
// 	AndExpr contributes nta controlTrueRight()  to Program.allCFGNodes();
// 	AndExpr contributes nta controlFalseRight() to Program.allCFGNodes();
// 	OrExpr contributes nta controlTrueLeft()  to Program.allCFGNodes();
// 	OrExpr contributes nta controlFalseLeft() to Program.allCFGNodes();
// 	OrExpr contributes nta controlTrueRight()  to Program.allCFGNodes();
// 	OrExpr contributes nta controlFalseRight() to Program.allCFGNodes();
// }

// aspect ShortCircuitAndOr {
// 	eq AndExpr.isControlFlowExpr() = true;
// 	eq OrExpr.isControlFlowExpr() = true;

// 	eq WhileStmt.controlTrue().nextNodes()  = getBody().firstNodes();
// 	eq WhileStmt.controlFalse().nextNodes() = nextNodes();

// 	eq WhileStmt.getCond().nextNodesTT() = SmallSet.<CFGNode>singleton(controlTrue());
// 	eq WhileStmt.getCond().nextNodesFF() = SmallSet.<CFGNode>singleton(controlFalse());



// 	// ----------------------------------------
// 	// Shared AndExpr / OrExpr
// 	syn boolean BinExpr.leftHasControlFlow()  = this.getLeft().isControlFlowExpr();
// 	syn boolean BinExpr.rightHasControlFlow() = this.getRight().isControlFlowExpr();

// 	// Control nodes for AndExpr

// 	syn nta ControlTrue  AndExpr.controlTrueLeft()   = new ControlTrue(this.getLeft());
// 	syn nta ControlFalse AndExpr.controlFalseLeft()  = new ControlFalse(this.getLeft());
// 	syn nta ControlTrue  AndExpr.controlTrueRight()  = new ControlTrue(this.getRight());
// 	syn nta ControlFalse AndExpr.controlFalseRight() = new ControlFalse(this.getRight());

// 	// Disabled, using workaround due to bug in JastAdd + collections on interfaces + ASTNode
// 	// AndExpr contributes nta controlTrueLeft()   to CFGNode.predColl();
// 	// AndExpr contributes nta controlFalseLeft()  to CFGNode.predColl();
// 	// AndExpr contributes nta controlTrueRight()  to CFGNode.predColl();
// 	// AndExpr contributes nta controlFalseRight() to CFGNode.predColl();
// 	// AndExpr contributes this when !inControlSensitiveContext() to CFGNode.predColl() for each ((CFGNode)this).succ();
// 	// OrExpr contributes this when !inControlSensitiveContext() to CFGNode.predColl() for each ((CFGNode)this).succ();

// 	syn SmallSet<CFGNode> AndExpr.nextNodesTTMaterialising() = inControlSensitiveContext()
// 	    ? nextNodesTT() : SmallSet.<CFGNode>singleton(this);
// 	syn SmallSet<CFGNode> AndExpr.nextNodesFFMaterialising() = inControlSensitiveContext()
// 	    ? nextNodesFF() : SmallSet.<CFGNode>singleton(this);

// 	eq AndExpr.controlTrueLeft().nextNodes()  = getRight().firstNodes();
// 	eq AndExpr.controlFalseLeft().nextNodes() = nextNodesFFMaterialising();

// 	eq AndExpr.controlTrueRight().nextNodes()  = nextNodesTTMaterialising();
// 	eq AndExpr.controlFalseRight().nextNodes() = nextNodesFFMaterialising();

// 	eq AndExpr.getLeft().nextNodesTT() {
// 		if (this.leftHasControlFlow()) {
// 			return getRight().firstNodes();
// 		} else {
// 			return controlTrueLeft().firstNodes();
// 		}
// 	}
// 	eq AndExpr.getLeft().nextNodesFF() {
// 		if (this.leftHasControlFlow()) {
// 			return nextNodesFFMaterialising();
// 		} else {
// 			return controlFalseLeft().firstNodes();
// 		}
// 	}
// 	eq AndExpr.getRight().nextNodesTT() {
// 		if (this.rightHasControlFlow()) {
// 			return nextNodesTTMaterialising();
// 		} else {
// 			return controlTrueRight().firstNodes();
// 		}
// 	}
// 	eq AndExpr.getRight().nextNodesFF() {
// 		if (this.rightHasControlFlow()) {
// 			return nextNodesFFMaterialising();
// 		} else {
// 			return controlFalseRight().firstNodes();
// 		}
// 	}



// 	// Control nodes for OrExpr

// 	syn nta ControlTrue  OrExpr.controlTrueLeft()   = new ControlTrue(this.getLeft());
// 	syn nta ControlFalse OrExpr.controlFalseLeft()  = new ControlFalse(this.getLeft());
// 	syn nta ControlTrue  OrExpr.controlTrueRight()  = new ControlTrue(this.getRight());
// 	syn nta ControlFalse OrExpr.controlFalseRight() = new ControlFalse(this.getRight());

// 	// Disabled, using workaround due to bug in JastAdd + collections on interfaces + ASTNode
// 	// OrExpr contributes nta controlTrueLeft()   to CFGNode.predColl();
// 	// OrExpr contributes nta controlFalseLeft()  to CFGNode.predColl();
// 	// OrExpr contributes nta controlTrueRight()  to CFGNode.predColl();
// 	// OrExpr contributes nta controlFalseRight() to CFGNode.predColl();

// 	syn SmallSet<CFGNode> OrExpr.nextNodesTTMaterialising() = inControlSensitiveContext()
// 	    ? nextNodesTT() : SmallSet.<CFGNode>singleton(this);
// 	syn SmallSet<CFGNode> OrExpr.nextNodesFFMaterialising() = inControlSensitiveContext()
// 	    ? nextNodesFF() : SmallSet.<CFGNode>singleton(this);

// 	eq OrExpr.controlTrueLeft().nextNodes()  = nextNodesTTMaterialising();
// 	eq OrExpr.controlFalseLeft().nextNodes() = getRight().firstNodes();

// 	eq OrExpr.controlTrueRight().nextNodes()  = nextNodesTTMaterialising();
// 	eq OrExpr.controlFalseRight().nextNodes() = nextNodesFFMaterialising();

// 	eq OrExpr.getLeft().nextNodesTT() {
// 		if (this.leftHasControlFlow()) {
// 			return nextNodesTTMaterialising();
// 		} else {
// 			return controlTrueLeft().firstNodes();
// 		}
// 	}
// 	eq OrExpr.getLeft().nextNodesFF() {
// 		if (this.leftHasControlFlow()) {
// 			return getRight().firstNodes();
// 		} else {
// 			return controlFalseLeft().firstNodes();
// 		}
// 	}
// 	eq OrExpr.getRight().nextNodesTT() {
// 		if (this.rightHasControlFlow()) {
// 			return nextNodesTTMaterialising();
// 		} else {
// 			return controlTrueRight().firstNodes();
// 		}
// 	}
// 	eq OrExpr.getRight().nextNodesFF() {
// 		if (this.rightHasControlFlow()) {
// 			return nextNodesFFMaterialising();
// 		} else {
// 			return controlFalseRight().firstNodes();
// 		}
// 	}
// }

// aspect NTAOwners {
// 	AndExpr implements NTAOwner;
// 	public java.util.List<ASTNode> AndExpr.getNTAs() {
// 		return Arrays.<ASTNode>asList(this.controlTrueRight(),
// 					      this.controlFalseRight(),
// 					      this.controlTrueLeft(),
// 					      this.controlTrueRight());
// 	}

// 	OrExpr implements NTAOwner;
// 	public java.util.List<ASTNode> OrExpr.getNTAs() {
// 		return Arrays.<ASTNode>asList(this.controlTrueRight(),
// 					      this.controlFalseRight(),
// 					      this.controlTrueLeft(),
// 					      this.controlTrueRight());
// 	}
// }
