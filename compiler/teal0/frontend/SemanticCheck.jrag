aspect SemanticCheck {
	/**
	 * Catch-all class for semantic errors not reported elsewhere
	 */
	class SemanticError extends CompilerError {
		public SemanticError(String msg, ASTNode node) {
			super("sem", msg, node);
		}
	}

	class LValueError extends SemanticError {
		public LValueError(ASTNode loc) {
			super("Illegal target expression for assignment", loc);
		}
	}

	coll ArrayList<CompilerError> Program.semanticErrors() [new ArrayList<CompilerError>()];

	/* Expr is direct left-hand side of assignment */
	inh boolean Expr.isAssignedTo();
	eq ASTNode.getChild().isAssignedTo() = false;
	eq AssignStmt.getLValue().isAssignedTo() = true;

	/* Expr can be assigned to (e.g., a variable) */
	syn boolean Expr.isAssignable() = false;
	eq Access.isAssignable() = true;
	eq IndexExpr.isAssignable() = true;
	eq TypedExpr.isAssignable() = getExpr().isAssignable();

	/* Check that we only assign when allowed */
	Expr contributes new LValueError(this)
	    when isAssignedTo() && !isAssignable()
	    to Program.semanticErrors();

	VarDecl contributes new SemanticError("Global variable does not allow explicit initialization. Its initial value is always null.", this)
		when hasInitializer() && getScope() == VariableScope.GLOBAL to Program.semanticErrors();

	syn String Decl.kind();
	eq VarDecl.kind() = "variable";
	eq FunDecl.kind() = "function";

	// Check that the right declaration kinds are used in the righ places
	class DeclKindError extends SemanticError {
		public DeclKindError(String use, String decl, String name, ASTNode node) {
			super(String.format("'%s' is declared as a %s, but used as a %s.", name, decl, use), node);
		}
	}

	Access contributes new DeclKindError("variable", getIdUse().lookup().getDecl().kind(), name(), this)
		when !getIdUse().lookup().isUnknown() && !getIdUse().lookup().getDecl().isVarDecl() to Program.semanticErrors();

	CallExpr contributes new DeclKindError("function", getIdUse().lookup().getDecl().kind(), name(), this)
		when !getIdUse().lookup().isUnknown() && !getIdUse().lookup().getDecl().isFunDecl() to Program.semanticErrors();


	// Check for ExprStmt that do nothing
	class InvalidExprStmtError extends SemanticError {
		public InvalidExprStmtError(ASTNode node) {
			super(String.format("Expression used as statement but has no effect.  Did you mean to add a \"return\"?"), node);
		}
	}

	syn boolean Expr.canHaveSideEffects() = true;
	eq Constant.canHaveSideEffects() = false;
	eq Access.canHaveSideEffects() = false;
	eq Null.canHaveSideEffects() = false;

	ExprStmt contributes
		new InvalidExprStmtError(this)
		when !getExpr().canHaveSideEffects()
		to Program.semanticErrors();
}
