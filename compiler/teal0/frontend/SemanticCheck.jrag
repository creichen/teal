aspect SemanticCheck {
	class SemanticError extends CompilerError {
		String msg;

		public SemanticError(SourceLocation loc, String msg) {
			super(loc);
			this.msg = msg;
		}

		@Override public String report() {
			return getSrcLoc() + ": " + msg;
		}
	}

	class LValueError extends SemanticError {
		public LValueError(SourceLocation loc) {
			super(loc, "Illegal target expression for assignment.");
		}
	}

	// nothing here
	coll ArrayList<CompilerError> Program.semanticErrors() [new ArrayList<CompilerError>()];

	syn boolean Expr.isLValue() = false;
	eq Access.isLValue() = true;
	eq IndexExpr.isLValue() = true;
	eq TypedExpr.isLValue() = getExpr().isLValue();

	AssignStmt contributes new LValueError(getLValue().sourceLocation()) when !getLValue().isLValue() to Program.semanticErrors();

	VarDecl contributes new SemanticError(sourceLocation(), "Global variable does not allow explicit initialization. Its initial value is always null.")
		when hasInitializer() && getScope() == VariableScope.GLOBAL to Program.semanticErrors();
}
