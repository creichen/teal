import java.util.Collection;
import java.util.ArrayList;

import lang.common.Report;
import lang.common.WithSourceLocation;
import lang.common.SourceLocation;


/**
 * The reporting aspect allows you to communicate your analysis results when
 * doing homework exercises.
 *
 * By customising the 'report' or 'reportMulti' attributes, you can make
 * each AST node to send any number of 'Report' objects.  These will then
 * show up on the standard output stream or in the code-prober UI.
 */
aspect Reporting {
	ASTNode implements WithSourceLocation;

	coll ArrayList<Report> Program.reports() [new ArrayList<Report>()] with add;

	syn Report ASTNode.report() = null;
	syn Collection<Report> ASTNode.reportMulti() = null;

	ASTNode contributes each reportMulti()
		when reportMulti() != null
		to Program.reports();

	ASTNode contributes report()
		when report() != null
		to Program.reports();

	Collection<Report> ASTNode.reports() {
	    final Collection<Report> multi_reports = this.reportMulti();
	    final Report report = this.report();
	    if (report == null) {
		return multi_reports;
	    }
	    final ArrayList<Report> all_reports = new ArrayList<>();
	    // single report always goes first
	    all_reports.add(report);
	    if (multi_reports != null) {
		all_reports.addAll(multi_reports);
	    }
	    return all_reports;
	}
}


aspect CompilerError {
	public abstract class CompilerError extends Report {
		/**
		 * Compiler error without associated location, applying to entire program
		 */
		public CompilerError(String type, String description) {
			super(type, Report.CodeProber.ERR, (ASTNode) null);
			this.withExplanation(description);
		}

		/**
		 * Compiler error attached to AST node
		 */
		public CompilerError(String type, String description, ASTNode node) {
			super(type, Report.CodeProber.ERR, node);
			this.withExplanation(description);
		}

		/**
		 * Compiler error attached to source location
		 */
		public CompilerError(String type, String description, SourceLocation loc) {
			super(type, Report.CodeProber.ERR, loc);
			this.withExplanation(description);
		}

		/**
		 * Source location, for testing
		 */
		public SourceLocation
		getSrcLoc() {
			return this.getFirstSrcLoc();
		}

		/**
		 * Combined explanation + location, for testing
		 */
		public String
		testReport() {
			return this.getFirstSrcLoc() + ": " + this.getExplanation();
		}
	}
}
aspect CodeProberGlue {
	syn int ASTNode.getStartLine() = startLine();
	syn int ASTNode.getStartColumn() = startColumn();
	syn int ASTNode.getEndLine() = endLine();
	syn int ASTNode.getEndColumn() = endColumn();
}
