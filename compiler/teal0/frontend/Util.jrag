import java.util.Map;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Comparator;
import lang.common.Report;
import beaver.Symbol;

import lang.common.WithSourceLocation;

aspect Util {
	public class AccHashMap<K, V> extends HashMap<K, V> {
		public void add(Map.Entry<K, V> e) {
			put(e.getKey(), e.getValue());
		}
	}

	public class AccTreeMap<K, V> extends TreeMap<K, V> {
		public void add(Map.Entry<K, V> e) {
			put(e.getKey(), e.getValue());
		}
		public AccTreeMap(Comparator<? super K> c) {
			super(c);
		}
	}

	/**
	 * HashMap that maps a key to multiple values
	 */
	public class MultiHashMap<K, V> extends HashMap<K, HashSet<V>> {
		public MultiHashMap() {
			super();
		}

		/**
		 * Add a value to the map
		 */
		public V append(K key, V value) {
			HashSet<V> entry = get(key);
			if (entry == null) {
				entry = new HashSet<>();
				put(key, entry);
			}
			entry.add(value);
			return value;
		}

		/**
		 * Get one value maped to key, if it exists. Otherwise, return null.
		 */
		public V getOne(K key) {
			HashSet<V> entry = get(key);
			if (entry == null)
				return null;
			return entry.iterator().next();
		}
	}

	/**
	 * Compare two AST nodes based on their source locations
	 */
	public class SrcLocComparator implements Comparator<ASTNode> {
		public int compare(ASTNode n1, ASTNode n2) {
			int startPos1 = n1.getStart();
			int startPos2 = n2.getStart();
			if (startPos1 < startPos2)
				return -1;
			else if (startPos1 > startPos2)
				return 1;
			return 0;
		}
	}
}
