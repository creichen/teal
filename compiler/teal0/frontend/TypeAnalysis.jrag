aspect TypeAnalysis {
	public interface TypeDefinition {
		lang.ir.IRTypeRef genIRTypeRef(); // code generation
	}

	Type implements TypeDefinition;

	// The following gives us the type of the expression if and only if we know the type precisely
	syn Type Expr.implicitType() = null;
	eq IntConstant.implicitType() = new IntType();
	eq StringConstant.implicitType() = new StringType();
	eq TypedExpr.implicitType() {
		return getDeclaredType();
	}

	// The inferred type of the expression:
	// EX1: You may want to replace this implementation
	syn TypeDefinition Expr.type() {
	    TypeDefinition ty = this.implicitType();
	    if (ty == null) {
		return new AnyType();
	    }
	    return ty;
	}

	// The type of this variable, as far as we can tell (without trying very hard); never null
	syn TypeDefinition VarDecl.variableType() {
		if (hasDeclaredType()) {
			return getDeclaredType();
		}
		if (hasInitializer()) {
			return getInitializer().type();
		}
		return new AnyType();
	}

	// The return type; never null
	syn TypeDefinition FunDecl.returnType() {
		if (hasDeclaredReturnType()) {
			return getDeclaredReturnType();
		}
		return new AnyType();
	}
}
