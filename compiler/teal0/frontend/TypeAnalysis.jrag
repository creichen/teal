import lang.common.Report;

/**
 * Incomplete type analysis
 *
 */
aspect TypeAnalysis {
	/**
	 * Type error report
	 */
	public class TypeError extends Report {
		/**
		 * Constructs a TypeError
		 *
		 * You can use <tt>withExplanation</tt> to change the description
		 *
		 * @param location AST node with the type error
		 * @param t1 String representation of th
		 */
		public TypeError(ASTNode location) {
			// Tag as WARN for yellow squiggly lines
			super("type", Report.CodeProber.WARN, location);
		}
	}

	/**
	 * One type object for each of the four predefined types from Teal-0
	 *
	 * Since Int, String etc. are AST nodes, they are not equal to each other.
	 * We represent them by unique values that we can easily check for equality.
	 */
	syn nta AnyType Program.anyType() = new AnyType();
	syn nta IntType Program.intType() = new IntType();
	syn nta StringType Program.stringType() = new StringType();
	syn nta ArrayType Program.arrayType(Type ty) = new ArrayType(ty);

	// Broadcast types downwards
	eq Program.getChild().anyType() = anyType();
	eq Program.getChild().intType() = intType();
	eq Program.getChild().stringType() = stringType();
	eq Program.getChild().arrayType(Type ty) = arrayType(ty);

	inh AnyType Type.anyType();
	inh IntType Type.intType();
	inh StringType Type.stringType();
	inh ArrayType Type.arrayType(Type ty);

	/**
	 * Canonical representative for each type, for easy equality checking
	 */
	syn Type Type.type();
	eq AnyType.type()    = anyType();
	eq IntType.type()    = intType();
	eq StringType.type() = stringType();
	eq ArrayType.type()  = arrayType(getActual().type());

	/**
	 * String representation for the name.  We keep toString unchanged to simplify debugging.
	 */
	syn String Type.name();
	eq AnyType.name()    = "any";
	eq IntType.name()    = "int";
	eq StringType.name() = "string";
	eq ArrayType.name()  = "array[" + getActual() + "]";

	/**
	 * Interpret the type of literal values and explicit type annotations.
	 *
	 * @return Either the precise type of the expression if that type is obvious
	 * purely by looking at the AST node, or <tt>null</tt>.
	 */
	syn Type Expr.implicitType() = null;
	eq IntConstant.implicitType()    = program().intType();
	eq StringConstant.implicitType() = program().stringType();
	eq TypedExpr.implicitType() {
		return getDeclaredType().type();
	}

	/**
	 * Infers the type of the expression.
	 *
	 * @return The expression's type, or AnyType if the expression's type
	 * is unknown or contradictory.
	 */
	syn Type Expr.type() {
		Type ty = this.implicitType();
		if (ty == null) {
			return program().anyType();
		}
		return ty;
	}

	// The type of this variable, as far as we can tell (without trying very hard); never null
	syn Type VarDecl.variableType() {
		if (hasDeclaredType()) {
			return getDeclaredType();
		}
		if (hasInitializer()) {
			return getInitializer().type();
		}
		return program().anyType();
	}

	syn Report VarDecl.report() {
	    if (hasDeclaredType() && hasInitializer()) {
		if (getDeclaredType() != getInitializer().type()) {
		    return new TypeError(this).withExplanation("type error");
		}
	    }
	    return null;
	}

	// The return type; never null
	syn Type FunDecl.returnType() {
		if (hasDeclaredReturnType()) {
			return getDeclaredReturnType();
		}
		return program().anyType();
	}
}
