aspect TypeAnalysis {
	/**
	 * Interpret the type of literal values and explicit type annotations.
	 *
	 * @return Either the precise type of the expression if that type is obvious
	 * purely by looking at the AST node, or <tt>null</tt>.
	 */
	syn Type Expr.implicitType() = null;
	eq IntConstant.implicitType() = new IntType();
	eq StringConstant.implicitType() = new StringType();
	eq TypedExpr.implicitType() {
		return getDeclaredType();
	}

	/**
	 * Infers the type of the expression.
	 *
	 * @return The expression's type, or AnyType if the expression's type
	 * is unknown or contradictory.
	 */
	syn Type Expr.type() {
	    Type ty = this.implicitType();
	    if (ty == null) {
		return new AnyType();
	    }
	    return ty;
	}

	// The type of this variable, as far as we can tell (without trying very hard); never null
	syn Type VarDecl.variableType() {
		if (hasDeclaredType()) {
			return getDeclaredType();
		}
		if (hasInitializer()) {
			return getInitializer().type();
		}
		return new AnyType();
	}

	// The return type; never null
	syn Type FunDecl.returnType() {
		if (hasDeclaredReturnType()) {
			return getDeclaredReturnType();
		}
		return new AnyType();
	}
}
