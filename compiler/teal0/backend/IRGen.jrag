import lang.ir.*;


aspect IRGen {
	// Create fresh reference to variable
	interface ModuleMemberIR {
		/**
		 * Emit IR code for self into module
		 */
		public void addIRToModule(IRModule module);
	}

	Decl implements ModuleMemberIR;

	/**
	 * Code generation details for different storage bindings of variables
	 * FIXME: rename to VariableBindingIR
	 */
	interface VariableScope {
		/**
		 * Init variable contents
		 */
		public void genInitializerIR(VarDecl var, IRFunctionCtx ctx);

		/**
		 * Assign the contens of an IR variable to this variable
		 */
		public void genAssignmentIR(VarDecl var, Access access, IRVarRef rhs, IRFunctionCtx ctx);

		/**
		 * Load the contents of such a variable
		 */
		public IRVarRef genLoadIR(VarDecl var, Access access, IRFunctionCtx ctx);
	}

	public static final VariableScope VariableScope.LOCAL = new VariableScope() {
			@Override
			public void genInitializerIR(VarDecl var, IRFunctionCtx ctx) {
				IRVarRef src = var.getVarDecl().getInitializer().genCode(ctx);

				IRVarRef dst = ctx.getIRVarRef(var.getVarDecl());
				IRCopyInsn copy = new IRCopyInsn(dst, src);
				ctx.addInsn(copy);
			}

			@Override
			public void genAssignmentIR(VarDecl var, Access access, IRVarRef rhs, IRFunctionCtx ctx) {
				IRVarRef dst = ctx.getIRVarRef(var);
				ctx.addInsn(new IRCopyInsn(dst, rhs));
				var.genPostUpdateIR(ctx);
			}

			@Override
			public IRVarRef genLoadIR(VarDecl var, Access access, IRFunctionCtx ctx) {
				return ctx.getIRVarRef(var);
			}
		};

	public static final VariableScope VariableScope.GLOBAL = new VariableScope() {
			@Override
			public void genInitializerIR(VarDecl var, IRFunctionCtx ctx) {
				throw new NotYetImplementedError("Can't initialize global variable " + this + ".");
			}

			@Override
			public void genAssignmentIR(VarDecl var, Access access, IRVarRef rhs, IRFunctionCtx ctx) {
				IRVarRef dst = new IRVarRef(var.genIR());
				ctx.addInsn(new IRStoreStaticInsn().setDst(dst).setSrc(rhs));
			}

			@Override
			public IRVarRef genLoadIR(VarDecl var, Access access, IRFunctionCtx ctx) {
				IRVarRef src = new IRVarRef(var.genIR());
				ctx.addInsn(new IRLoadStaticInsn().setDst(ctx.getTempIRVar(access)).setSrc(src));
				return ctx.getTempIRVar(access);
			}
		};


	coll ArrayList<VarDecl> FunDecl.localVars() root FunDecl;
	VarDecl contributes this to FunDecl.localVars();
	// local declarations
	coll ArrayList<IdDecl> FunDecl.localDecls() root FunDecl;
	IdDecl contributes this to FunDecl.localDecls();
	syn HashMap<IdDecl, Integer> FunDecl.localDeclUIDs() {
		HashMap<IdDecl, Integer> uids = new HashMap<>();
		for (int i = 0; i < localDecls().size(); ++i) {
			uids.put(localDecls().get(i), i);
		}
		return uids;
	}
	// local expressions
	coll ArrayList<Expr> FunDecl.localExprs() root FunDecl;
	Expr contributes this to FunDecl.localExprs();
	syn HashMap<Expr, Integer> FunDecl.localExprUIDs() {
		HashMap<Expr, Integer> uids = new HashMap<>();
		for (int i = 0; i < localExprs().size(); ++i) {
			uids.put(localExprs().get(i), i);
		}
		return uids;
	}

	inh int Stmt.getUID(Expr e);
	inh int Expr.getUID(Expr e);
	syn int Expr.getUID() = getUID(this);
	eq FunDecl.getBody().getUID(Expr e) {
		Integer uid = localExprUIDs().get(e);
		assert uid != null;
		return uid;
	}

	// Collect global variables; we could implement this
	// as a collection attribute, but that might be expensive.
	// We know that global variables are VarDecls at top-level,
	// so we don't have to traverse the entire AST to collect them.
	syn VarDecl Decl.getVarDecl() = null;
	eq VarDecl.getVarDecl() = this;
	syn ArrayList<VarDecl> Module.globalVars() {
		ArrayList<VarDecl> varDecls = new ArrayList<>();
		for (Decl d : getDecls()) {
			VarDecl v = d.getVarDecl();
			if (v != null) {
				varDecls.add(v);
			}
		}
		return varDecls;
	}

	syn IRProgram Program.genIR() {
		IRProgram p = new IRProgram();
		for (Module m : getModules()) {
			p.addIRModule(m.genIR());
		}
		return p;
	}

	// Helper methods for Module.genIR()
	@Override
	public void VarDecl.addIRToModule(IRModule m) {
		m.getIRVars().add(this.genIR());
		if (this.hasInitializer()) {
			throw new NotYetImplementedError("Cannot generate code for global variable initializers.");
		}
	}

	/**
	 * IR Function code generation context
	 *
	 * Aggregates IR code as we generate it, allocates variables and basic blocks on demand.
	 */
	// FIXME: no need to be abstract
	public abstract class IRFunctionCtx {
		protected IRFunction F;
		protected IRCodeBB BB;
		protected int counter = 0;
		protected HashMap<VarDecl, IRVar> locals;
		protected HashMap<Expr, IRVar> temps;

		public IRFunctionCtx(IRFunction F) {
			this.F = F;
			locals = new HashMap<>();
			temps = new HashMap<>();
		}

		public IRCodeBB startBB() {
			BB = new IRCodeBB(new lang.ir.List(), null);
			F.getIRCodeBBList().add(BB);
			return BB;
		}

		// same effect as startBB() except for hasBB()
		public void endBB() {
			BB = null;
		}

		public boolean hasBB() {
			return BB != null;
		}

		public IRCodeBB getCurrentBB() {
			if (BB == null) {
				startBB();
			}
			return BB;
		}

		public void addInsn(IRInsn I) {
			BB.getIRInsnList().add(I);
		}

		public void setSourceLocations(SourceLocation srcLoc) {
			for (int i = BB.getNumIRInsn() - 1; i >= 0; --i) {
				if (!BB.getIRInsn(i).getSourceLocation().equals(SourceLocation.UNKNOWN)) {
					break;
				}
				BB.getIRInsn(i).setSourceLocation(srcLoc);
			}
		}

		public IRVarRef getTempIRVar(Expr e) {
			IRVar tmp = temps.get(e);
			if (tmp == null) {
				tmp = getFreshTempIRVar(e);
				temps.put(e, tmp);
			}
			return new IRVarRef(tmp);
		}

		public IRVar getFreshTempIRVar(Expr e) {
			return getFreshTempIRVar(e.type().genIRTypeRef());
		}

		public IRVar getFreshTempIRVar(IRTypeRef t) {
			IRVar tmp = new IRVar(new IRName("tmp" + counter++), t);
			F.getLocals().add(tmp);
			return tmp;
		}

		public IRVarRef getIRVarRef(VarDecl d) {
			IRVar v = locals.get(d);
			if (v == null) {
				// Append an index to the name. We might have multiple variables with
				// the same name at different scopes, and we want them to have a unique
				// name inside the IR
				v = new IRVar(new IRName(d.name() + counter++), d.variableType().genIRTypeRef());
				v.setSourceLocation(d.sourceLocation());
				F.getLocals().add(v);
				locals.put(d, v);
			}
			return new IRVarRef(v);
		}

		protected IRVar returnVar;
		public IRVar getReturnVar() {
			if (returnVar == null) {
				returnVar = getFreshTempIRVar(F.getIRTypeRef());
			}
			return returnVar;
		}

	}

	public interface FunctionCtxFactory {
		// Generates an IRFunction context that tracks context when generating code within functions
		public IRFunctionCtx genCtx(IRFunction f);
	}

	/**
	 * Generates a factory for function context
	 *
	 * This indirection allows later layers of Teal to add more features to function contexts.
	 */
	syn FunctionCtxFactory Decl.functionCtxFactory() {
		return new FunctionCtxFactory() {
			@Override
			public IRFunctionCtx genCtx(IRFunction f) {
				return new IRFunctionCtx(f) {};
			}
		};
	}

	@Override
	public void FunDecl.addIRToModule(IRModule m) {
		IRFunction f = this.genIR();
		IRFunctionCtx fctx = this.functionCtxFactory().genCtx(f);
		if (this.hasBody()) {
			this.genCode(fctx);
		}
		m.getIRFunctions().add(f);
	}

	syn IRModule Module.genIR() {
		String name = getName().stream().collect(Collectors.joining("::"));

		IRModule m = new IRModule();
		m.setIRModuleName(new IRModuleName(new lang.ir.List(new IRName(name))));

		// Add code for all class elements
		for (Decl d : getDecls()) {
			d.addIRToModule(m);
		}

		// FIXME: do we still need this code?  What does it do that the loop above doesn't do already?
		// for (Decl d : getBuiltinDeclList()) {
// TODO: ----------------_ REVISE (I don't see why we would need this?)
			// if (d instanceof FunDecl) {
			// 	FunDecl fd = (FunDecl) d;
			// 	IRFunction f = fd.genIR();
			// 	IRFunctionCtx fctx = this.functionCtxFactory().genCtx(f);
			// 	if (fd.hasBody())
			// 		fd.genCode(fctx);
			// 	m.getIRFunctions().add(f);
// TODO: ----------------_ REVISE
			// } else if (d == getBuiltinClassDecl(BuiltinNames.QUALIFIER)) {
			// 	// generate code for the qualifier builtin type
			// 	IRClass c = (IRClass) ((ClassDecl) d).genIR();
			// 	((ClassDecl) d).genCode(c);
			// 	m.addIRTypeCon(c);
			// }
		//}

		return m;
	}


	syn IRFunction FunDecl.genIR() {
		IRFunction func = new IRFunction();
		// name
		func.setIRName(getIdDecl().genIR());
		// formal param types
		lang.ir.List<IRTypeRef> irTypes = new lang.ir.List<>();
		for (VarDecl d : getFormals()) {
			irTypes.add(d.variableType().genIRTypeRef());
		}
		func.setParamTypeList(irTypes);
		// return type, if any
		IRTypeRef typeref = returnType().genIRTypeRef();
		if (typeref == null) {
			throw new RuntimeException("Internal error: null type ref generated for " + ((ASTNode)returnType()).dumpTree());
		}
		func.setIRTypeRef(typeref);

		func.setSourceLocation(this.sourceLocation());

		return func;
	}

	public void FunDecl.genCode(IRFunctionCtx fctx) {
		fctx.startBB();
		// generate code for the arguments
		for (int i = 0; i < getNumFormal(); ++i) {
			VarDecl d = getFormal(i);
			IRVarRef v = fctx.getIRVarRef(d);
			IRArgInsn iarg = new IRArgInsn(v, i);
			fctx.addInsn(iarg);
		}

		getBody().genCode(fctx);

		if (fctx.hasBB() && fctx.getCurrentBB().getIRCodeExit() == null) {
			// no exit here
			fctx.addInsn(new IRConstantInsn().setDst(new IRVarRef(fctx.getReturnVar()))
										.setSrc(new IRNull()));
			fctx.getCurrentBB().setIRCodeExit(new IRReturn(new IRVarRef(fctx.getReturnVar())));
		}
	}

	public void Stmt.genCode(IRFunctionCtx ctx) { }
	public void BlockStmt.genCode(IRFunctionCtx ctx) {
		// IRCodeBB currentBB = ctx.startBB();
		for (Stmt s : getStmts()) {
			s.genCode(ctx);
		}
	}

	public void AssignStmt.genCode(IRFunctionCtx ctx) {
		IRVarRef right = getRValue().genCode(ctx);
		getLValue().genAssignment(right, ctx);
	}

	public void VarDecl.genCodeInitializer(IRFunctionCtx ctx) {
		if (!hasInitializer()) {
			return;
		}
		// generate code for the initializer
		this.getScope().genInitializerIR(this, ctx);
		ctx.setSourceLocations(this.sourceLocation());
	}


	/**
	 * Code generation to apply after initialising / updating a variable
	 *
	 */
	interface VarPostprocessingIR {
		// after initialisation
		public void
		genPostInitIR(IRFunctionCtx ctx);

		// after update
		public void
		genPostUpdateIR(IRFunctionCtx ctx);
	}

	/**
	 * Extension point for deeper layers of Teal to add more code after initialisation
	 */
	syn VarPostprocessingIR VarDecl.postprocessingIRGen() {
		return null;
	}

	protected void VarDecl.genPostInitIR(IRFunctionCtx ctx) {
		VarPostprocessingIR postCodeGen = this.postprocessingIRGen();
		if (postCodeGen != null) {
			postCodeGen.genPostInitIR(ctx);
		}
	}

	protected void VarDecl.genPostUpdateIR(IRFunctionCtx ctx) {
		VarPostprocessingIR postCodeGen = this.postprocessingIRGen();
		if (postCodeGen != null) {
			postCodeGen.genPostUpdateIR(ctx);
		}
	}

	public void VarDecl.genCode(IRFunctionCtx ctx) {
		this.genCodeInitializer(ctx);
		this.genPostInitIR(ctx);
	}

	public void VarDeclStmt.genCode(IRFunctionCtx ctx) {
		getVarDecl().genCode(ctx);
	}

	public void ExprStmt.genCode(IRFunctionCtx ctx) {
		getExpr().genCode(ctx);
	}

	public void IfStmt.genCode(IRFunctionCtx ctx) {
		IRVarRef cond = getCond().genCode(ctx);
		IRCodeBB currentBB = ctx.getCurrentBB();

		IRCodeBB thenEntry = ctx.startBB();
		getThen().genCode(ctx);
		IRCodeBB thenExit = ctx.getCurrentBB();


		IRCodeBB elseEntry = ctx.startBB();
		getElse().genCode(ctx);
		IRCodeBB elseExit = ctx.getCurrentBB();

		IRCodeBB joinBB = ctx.startBB();

		// set the terminators
		currentBB.setIRCodeExit(new IRBranch(cond, new IRCodeBBRef(thenEntry), new IRCodeBBRef(elseEntry)));
		thenExit.setIRCodeExit(new IRJump(new IRCodeBBRef(joinBB)));
		elseExit.setIRCodeExit(new IRJump(new IRCodeBBRef(joinBB)));
	}

	public void WhileStmt.genCode(IRFunctionCtx ctx) {
		IRCodeBB currentBB = ctx.getCurrentBB();

		// loop's header block
		IRCodeBB headerBB = ctx.startBB();
		IRVarRef cond = getCond().genCode(ctx);

		// the first block in the body
		IRCodeBB bodyEntryBB = ctx.startBB();
		getBody().genCode(ctx);
		// the last block in the body
		IRCodeBB bodyExitBB = ctx.getCurrentBB();

		// loop's exit BB
		IRCodeBB exitBB = ctx.startBB();

		currentBB.setIRCodeExit(new IRJump(new IRCodeBBRef(headerBB)));
		headerBB.setIRCodeExit(new IRBranch(cond, new IRCodeBBRef(bodyEntryBB), new IRCodeBBRef(exitBB)));
		// and the loop back-edge
		bodyExitBB.setIRCodeExit(new IRJump(new IRCodeBBRef(headerBB)));
	}

	public void ReturnStmt.genCode(IRFunctionCtx ctx) {
		// generate the code to compute the return value
		IRVarRef retVal = getExpr().genCode(ctx);

		// copy this to the return value
		ctx.addInsn(new IRCopyInsn(new IRVarRef(ctx.getReturnVar()), retVal));
		IRCodeBB currentBB = ctx.getCurrentBB();
		IRReturn ret = new IRReturn(new IRVarRef(ctx.getReturnVar()));
		ret.setSourceLocation(sourceLocation());
		currentBB.setIRCodeExit(ret);
		// ctx will auto-start a new basic block to hold the translation
		// of any (unreachable) statements following the return if needed.
		ctx.endBB();
	}

	syn IRVar VarDecl.genIR() {
		IRVar var = new IRVar(getIdDecl().genIR(), variableType().genIRTypeRef());
		var.setSourceLocation(sourceLocation());
		return var;
	}

	syn IRName IdDecl.genIR() = new IRName(getIdentifier());
}
