import lang.ir.*;
import lang.common.SourceLocation;
import lang.common.NotYetImplementedError;
import lang.common.BuiltinNames;

aspect IRGenExpr {

	inh VariableScope Decl.getScope();
	eq Module.getDecl().getScope() = VariableScope.GLOBAL;
	eq Program.getBuiltinDecls().getScope() = VariableScope.GLOBAL;
	eq FunDecl.getFormal().getScope() = VariableScope.LOCAL;
	eq VarDeclStmt.getVarDecl().getScope() = VariableScope.LOCAL;

	syn IRVar Expr.getIRVar() {
		int uid = getUID();
		return new IRVar(new IRName("$" + uid), type().genIRTypeRef());
	}

	syn IRVarRef Expr.getIRVarRef() {
		return new IRVarRef(getIRVar());
	}

	public IRVarRef Expr.genCode(IRFunctionCtx ctx) {
		throw new NotYetImplementedError("Can't translate expression " + this.getClass());
	}

	syn BuiltinNames.Operation BinExpr.builtin();
	eq AddExpr.builtin() = BuiltinNames.INT_ADD;
	eq SubExpr.builtin() = BuiltinNames.INT_SUB;
	eq MulExpr.builtin() = BuiltinNames.INT_MUL;
	eq DivExpr.builtin() = BuiltinNames.INT_DIV;
	eq ModExpr.builtin() = BuiltinNames.INT_MOD;
	eq EQExpr.builtin() = BuiltinNames.ANY_EQ;
	eq NEQExpr.builtin() = BuiltinNames.ANY_NEQ;
	eq LTExpr.builtin() = BuiltinNames.INT_LT;
	eq GTExpr.builtin() = BuiltinNames.INT_GT;
	eq LEQExpr.builtin() = BuiltinNames.INT_LEQ;
	eq GEQExpr.builtin() = BuiltinNames.INT_GEQ;
	eq OrExpr.builtin() = BuiltinNames.INT_OR;
	eq AndExpr.builtin() = BuiltinNames.INT_AND;

	public IRVarRef BinExpr.genCode(IRFunctionCtx ctx) {
		IdDecl dd = lookup(builtin().getName());
		IRFunRef builtinFunc = new IRFunRef(((FunDecl)dd.getDecl()).genIR());
		IRVarRef r = ctx.getTempIRVar(this);

		IRCallInsn call = new IRCallInsn().setDst(r).setIRFunRef(builtinFunc);
		IRVarRef left = getLeft().genCode(ctx);
		IRVarRef right = getRight().genCode(ctx);
		call.addArg(left).addArg(right);

		ctx.addInsn(call);
		ctx.setSourceLocations(this.sourceLocation());
		return r;
	}

	public void Expr.genAssignment(IRVarRef rhs, IRFunctionCtx ctx) { throw new RuntimeException(getClass() + " not allowed as LValue."); }

	public void Access.genAssignment(IRVarRef rhs, IRFunctionCtx ctx) {
		IdDecl idDecl = getIdUse().lookup();
		VarDecl d = (VarDecl) idDecl.getDecl();
		d.getScope().genAssignmentIR(d, this, rhs, ctx);
		ctx.setSourceLocations(this.sourceLocation());
	}

	public IRVarRef Access.genCode(IRFunctionCtx ctx) {
		// this can be a local variable load, global variable load or member access
		IdDecl idDecl = getIdUse().lookup();
		VarDecl d = (VarDecl) idDecl.getDecl();
		IRVarRef r = d.getScope().genLoadIR(d, this, ctx);
		ctx.setSourceLocations(this.sourceLocation());
		return r;
	}

	public void IndexExpr.genAssignment(IRVarRef rhs, IRFunctionCtx ctx) {
		IRVarRef base = getBase().genCode(ctx);
		IRVarRef index = getIndex().genCode(ctx);
		ctx.addInsn(new IRStoreArrayInsn().setBase(base).setIndex(index).setSrc(rhs));
		ctx.setSourceLocations(this.sourceLocation());
	}

	public IRVarRef IndexExpr.genCode(IRFunctionCtx ctx) {
		IRVarRef base = getBase().genCode(ctx);
		IRVarRef index = getIndex().genCode(ctx);
		IRVarRef dst = ctx.getTempIRVar(this);
		IRLoadArrayInsn load = new IRLoadArrayInsn()
			.setBase(base).setIndex(index).setDst(dst);
		ctx.addInsn(load);
		ctx.setSourceLocations(this.sourceLocation());
		return dst;
	}

	public IRVarRef CallExpr.genCode(IRFunctionCtx ctx) {
		IdUse fun = getIdUse();
		FunDecl fd = (FunDecl) fun.lookup().getDecl();
		IRFunRef funCallTarget = new IRFunRef(fd.genIR());
		IRVarRef r = ctx.getTempIRVar(this);
		if (fd.getScope() == VariableScope.GLOBAL) {
			IRCallInsn call = new IRCallInsn().setDst(r);
			call.setIRFunRef(funCallTarget);
			for (Expr e : getActuals()) {
				IRVarRef arg = e.genCode(ctx);
				call.addArg(arg);
			}
			ctx.addInsn(call);
		}
		ctx.setSourceLocations(this.sourceLocation());
		return r;
	}

	// This is an attribute so that we can extend it in later layers of Teal
	syn IRVarRef NewExpr.genCode(IRFunctionCtx ctx) {
		if (!(getType() instanceof ArrayType))
			throw new RuntimeException("The 'new' operator can be used only for array types.");

		IRVarRef dst = ctx.getTempIRVar(this);
		IRVarRef size = getActual(0).genCode(ctx);
		IRNewArrayInsn newInsn = new IRNewArrayInsn().setDst(dst)
			.setIRType((IRType) ((ArrayType) getType()).getActual().genIRTypeRef()).setSize(size);
		ctx.addInsn(newInsn);
		ctx.setSourceLocations(this.sourceLocation());
		return dst;
	}

	syn IRVarRef ArrayLiteralExpr.genCode(IRFunctionCtx ctx) {
		ctx.setSourceLocations(this.sourceLocation());

		IRVarRef dst = ctx.getTempIRVar(this);
		IRVarRef size = new IRVarRef(ctx.getFreshTempIRVar(IRModule.makeIntegerTypeRef()));
		ctx.addInsn(new IRConstantInsn(size, new IRInteger((long) this.getNumExpr())));
		IRNewArrayInsn newInsn = new IRNewArrayInsn().setDst(dst)
			.setIRType((IRType) IRModule.makeAnyTypeRef()).setSize(size); // FIXME: more precise type if we get type inference
		ctx.addInsn(newInsn);

		long indexCounter = 0;
		IRVarRef index = size;
		for (Expr expr : this.getExprs()) {
			IRVarRef elt = expr.genCode(ctx);
			ctx.setSourceLocations(this.sourceLocation());
			ctx.addInsn(new IRConstantInsn(index, new IRInteger(indexCounter)));
			ctx.addInsn(new IRStoreArrayInsn(elt, dst, index));
			indexCounter += 1;
		}

		return dst;
	}

	public IRVarRef TypedExpr.genCode(IRFunctionCtx ctx) {
		IRVarRef e = getExpr().genCode(ctx);
		// create a temporary variable of the required type
		IRVarRef tmp = ctx.getTempIRVar(this);
		ctx.addInsn(new IRCopyInsn(tmp, e));
		ctx.setSourceLocations(this.sourceLocation());
		// TODO: generate an assertion too
		return tmp;
	}

	public IRVarRef IntConstant.genCode(IRFunctionCtx ctx) {
		IRVarRef r = ctx.getTempIRVar(this);
		ctx.addInsn(new IRConstantInsn(r, new IRInteger(getValue())));
		ctx.setSourceLocations(this.sourceLocation());
		return r;
	}

	public IRVarRef StringConstant.genCode(IRFunctionCtx ctx) {
		IRVarRef r = ctx.getTempIRVar(this);
		ctx.addInsn(new IRConstantInsn(r, new IRString(getValue())));
		ctx.setSourceLocations(this.sourceLocation());
		return r;
	}

	public IRVarRef Null.genCode(IRFunctionCtx ctx) {
		IRVarRef r = ctx.getTempIRVar(this);
		ctx.addInsn(new IRConstantInsn(r, new IRNull()));
		ctx.setSourceLocations(this.sourceLocation());
		return r;
	}
}
