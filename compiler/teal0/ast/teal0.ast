// FIXME: inconsistent yse of Id vs ID (always ID!)
// Variables
VarDecl : Decl ::= IdDecl [Type] [Initializer:Expr];

// Functions
FunDecl : Decl ::= IdDecl [Type] Formal:VarDecl* [Body:Stmt];

// Expressions
abstract Expr;

// Binary
abstract BinExpr : Expr ::= Left:Expr Right:Expr;
AddExpr : BinExpr;
SubExpr : BinExpr;
MulExpr : BinExpr;
DivExpr : BinExpr;
ModExpr : BinExpr;
EQExpr : BinExpr;
NEQExpr : BinExpr;
LTExpr : BinExpr;
GTExpr : BinExpr;
LEQExpr : BinExpr;
GEQExpr : BinExpr;
OrExpr : BinExpr;
AndExpr : BinExpr;

// Other expressions
CallExpr : Expr ::= IdUse Actual:Expr*;
Null : Expr;
ArrayLiteralExpr : Expr ::= Expr*;
IndexExpr : Expr ::= Base:Expr Index:Expr;
NotExpr : Expr ::= Expr;
TypedExpr : Expr ::= Expr Type;
NewExpr : Expr ::= Type Actual:Expr*; // Array allocation.  In later layers of Teal we generalise this to object allocation.

// Constants
Constant : Expr;
IntConstant : Constant ::= <Value:Long>;
StringConstant : Constant ::= <Value:String>;

// Access
Access : Expr ::= IdUse ;
QualifiedAccess : Expr ::= PackagePathFragment* ;

// Statements
abstract Stmt;
VarDeclStmt : Stmt ::= VarDecl;
ExprStmt : Stmt ::= Expr;
AssignStmt : Stmt ::= LValue:Expr RValue:Expr;
BlockStmt : Stmt ::= Stmt*;
IfStmt : Stmt ::= Cond:Expr Then:Stmt Else:Stmt;
WhileStmt : Stmt ::= Cond:Expr Body:Stmt;
ReturnStmt : Stmt ::= Expr;
SkipStmt : Stmt;

// Identifiers
IdUse ::= <ID>;
IdDecl ::= <ID>;
// Unknown
UnknownDecl : IdDecl;
