import lang.common.BuiltinNames;

aspect BuiltinTypes {
	public class BuiltinTypes {
		public static final BuiltinTypeCon INT = new BuiltinTypeCon().setIdDecl(new IdDecl(BuiltinNames.INT));
		public static final BuiltinTypeCon STRING = new BuiltinTypeCon().setIdDecl(new IdDecl(BuiltinNames.STRING));
		public static final BuiltinTypeCon ANY = new BuiltinTypeCon().setIdDecl(new IdDecl(BuiltinNames.ANY));
		public static final BuiltinTypeCon ARRAY = new BuiltinTypeCon().setIdDecl(new IdDecl(BuiltinNames.ARRAY))
			.setTypeFormalList(new List<TypeVarDecl>(new TypeVarDecl(new IdDecl("T"))));

		public static final List<Decl> BUILTINS = new List<Decl>();
		static {
			BUILTINS
				.add(INT)
				.add(STRING)
				.add(ANY)
				.add(ARRAY);
		}
	}

	// FIXME: use explicit type references!
	private Decl Module.makeBuiltinFunDecl(String name, String retType, String ...argTypes) {
		FunDecl f = new FunDecl();
		f.setIdDecl(new IdDecl(name));
		f.setType(new Type(new IdUse(retType), new List()/*, new List()*/));

		int count = 0;
		for (String t : argTypes)  {
			String argName = "a" + (count++);
			f.addFormal(new VarDecl(new IdDecl(argName), new Opt(new Type(new IdUse(t), new List()/*, new List()*/)), new Opt()));
		}

		return f;
	}

	/**
	 * Introduce the int, string, any, array[T] as builtin types.
	 **/
	syn nta List<Decl> Module.getBuiltinDeclList() {
		List<Decl> decls = BuiltinTypes.BUILTINS.copy();

		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_ADD, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_SUB, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_MUL, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_DIV, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_MOD, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));

		decls.add(makeBuiltinFunDecl(BuiltinNames.ANY_EQ, BuiltinNames.INT, BuiltinNames.ANY, BuiltinNames.ANY));
		decls.add(makeBuiltinFunDecl(BuiltinNames.ANY_NEQ, BuiltinNames.INT, BuiltinNames.ANY, BuiltinNames.ANY));

		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_LEQ, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_GEQ, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_LT, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_GT, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));

		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_AND, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_OR, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));

		decls.add(makeBuiltinFunDecl(BuiltinNames.PRINT, BuiltinNames.ANY, BuiltinNames.STRING));
		decls.add(makeBuiltinFunDecl(BuiltinNames.READ, BuiltinNames.STRING));

		return decls;
	}

	syn BuiltinTypeCon Module.getBuiltinBuiltinTypeCon(String name) {
		switch (name) {
		case BuiltinNames.INT:
			return (BuiltinTypeCon) getBuiltinDecl(0);
		case BuiltinNames.STRING:
			return (BuiltinTypeCon) getBuiltinDecl(1);
		case BuiltinNames.ANY:
			return (BuiltinTypeCon) getBuiltinDecl(2);
		case BuiltinNames.ARRAY:
			return (BuiltinTypeCon) getBuiltinDecl(3);
		default:
			return null;
		}
	}

	inh BuiltinTypeCon Decl.getBuiltinBuiltinTypeCon(String name);

	eq Module.getDecl().getBuiltinBuiltinTypeCon(String name) {
		return getBuiltinBuiltinTypeCon(name);
	}
	eq Module.getBuiltinDecl().getBuiltinBuiltinTypeCon(String name) {
		return getBuiltinBuiltinTypeCon(name);
	}
	inh BuiltinTypeCon Expr.getBuiltinBuiltinTypeCon(String name);
}
