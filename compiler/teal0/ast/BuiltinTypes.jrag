import lang.common.BuiltinNames;

aspect BuiltinTypes {
	inh Program ASTNode.program();
	eq Program.getChild().program() = this;

	coll ArrayList<Decl> Program.builtins();
	syn TypeDefinition Decl.typeDefinition() = null; // Extract type definition if the decl is a type

	syn TypeDefinition Program.INT() = this.INTDecl().typeDefinition();
	syn TypeDefinition Program.ANY() = this.ANYDecl().typeDefinition();
	syn TypeDefinition Program.STRING() = this.STRINGDecl().typeDefinition();
	syn TypeDefinition Program.ARRAY() = this.ARRAYDecl().typeDefinition();

	syn nta Decl Program.INTDecl() = builtinType(BuiltinNames.INT);
	syn nta Decl Program.ANYDecl() = builtinType(BuiltinNames.ANY);
	syn nta Decl Program.STRINGDecl() = builtinType(BuiltinNames.STRING);
	syn nta Decl Program.ARRAYDecl() = builtinType(BuiltinNames.ARRAY)
		.setTypeFormalList(new List<TypeVarDecl>(new TypeVarDecl(new IdDecl("T"))));

	Program contributes INTDecl() to Program.builtins();
	Program contributes ANYDecl() to Program.builtins();
	Program contributes STRINGDecl() to Program.builtins();
	Program contributes ARRAYDecl() to Program.builtins();

	// FIXME: use explicit type references!
	private Decl Module.makeBuiltinFunDecl(String name, String retType, String ...argTypes) {
		FunDecl f = new FunDecl();
		f.setIdDecl(new IdDecl(name));
		f.setType(new Type(new IdUse(retType), new List()/*, new List()*/));

		int count = 0;
		for (String t : argTypes)  {
			String argName = "a" + (count++);
			f.addFormal(new VarDecl(new IdDecl(argName), new Opt(new Type(new IdUse(t), new List()/*, new List()*/)), new Opt()));
		}

		return f;
	}

	// /**
	//  * Introduce the int, string, any, array[T] as builtin types.
	//  **/
	syn nta List<Decl> Module.getBuiltinDeclList() {
		List<Decl> decls = new List<Decl>();
			// .add(program().INT())
			// .add(program().ANY())
			// .add(program().STRING())
			// .add(new ClassDecl().setIdDecl(new IdDecl(BuiltinNames.ARRAY))
			//      .setTypeFormalList(new List<TypeVarDecl>(new TypeVarDecl(new IdDecl("T")))));
		// List<Decl> decls = BuiltinTypes.BUILTINS.copy();

		for (Decl d : program().builtins()) {
			decls.add(d);
		}

		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_ADD, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_SUB, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_MUL, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_DIV, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_MOD, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));

		decls.add(makeBuiltinFunDecl(BuiltinNames.ANY_EQ, BuiltinNames.INT, BuiltinNames.ANY, BuiltinNames.ANY));
		decls.add(makeBuiltinFunDecl(BuiltinNames.ANY_NEQ, BuiltinNames.INT, BuiltinNames.ANY, BuiltinNames.ANY));

		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_LEQ, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_GEQ, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_LT, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_GT, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));

		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_AND, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));
		decls.add(makeBuiltinFunDecl(BuiltinNames.INT_OR, BuiltinNames.INT, BuiltinNames.INT, BuiltinNames.INT));

		decls.add(makeBuiltinFunDecl(BuiltinNames.PRINT, BuiltinNames.ANY, BuiltinNames.STRING));
		decls.add(makeBuiltinFunDecl(BuiltinNames.READ, BuiltinNames.STRING));

		return decls;
	}

	// syn BuiltinTypeCon Module.getBuiltinBuiltinTypeCon(String name) {
	// 	switch (name) {
	// 	case BuiltinNames.INT:
	// 		return (BuiltinTypeCon) getBuiltinDecl(0);
	// 	case BuiltinNames.STRING:
	// 		return (BuiltinTypeCon) getBuiltinDecl(1);
	// 	case BuiltinNames.ANY:
	// 		return (BuiltinTypeCon) getBuiltinDecl(2);
	// 	case BuiltinNames.ARRAY:
	// 		return (BuiltinTypeCon) getBuiltinDecl(3);
	// 	default:
	// 		return null;
	// 	}
	// }

	// inh BuiltinTypeCon Decl.getBuiltinBuiltinTypeCon(String name);

	// eq Module.getDecl().getBuiltinBuiltinTypeCon(String name) {
	// 	return getBuiltinBuiltinTypeCon(name);
	// }
	// eq Module.getBuiltinDecl().getBuiltinBuiltinTypeCon(String name) {
	// 	return getBuiltinBuiltinTypeCon(name);
	// }
	// inh BuiltinTypeCon Expr.getBuiltinBuiltinTypeCon(String name);
}
